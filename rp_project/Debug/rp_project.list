
rp_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d9c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08003ea8  08003ea8  00013ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fd0  08003fd0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003fd0  08003fd0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fd0  08003fd0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fd0  08003fd0  00013fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fd4  08003fd4  00013fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003fd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000070  08004048  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08004048  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6e2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d56  00000000  00000000  0002b77b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  0002d4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  0002e250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e78  00000000  00000000  0002ef00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8b9  00000000  00000000  00047d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009082a  00000000  00000000  00055631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5e5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004040  00000000  00000000  000e5eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e90 	.word	0x08003e90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003e90 	.word	0x08003e90

0800014c <delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint16_t time)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000156:	4b08      	ldr	r3, [pc, #32]	; (8000178 <delay_us+0x2c>)
 8000158:	681b      	ldr	r3, [r3, #0]
 800015a:	2200      	movs	r2, #0
 800015c:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim1)) < time);
 800015e:	bf00      	nop
 8000160:	4b05      	ldr	r3, [pc, #20]	; (8000178 <delay_us+0x2c>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000166:	88fb      	ldrh	r3, [r7, #6]
 8000168:	429a      	cmp	r2, r3
 800016a:	d3f9      	bcc.n	8000160 <delay_us+0x14>
}
 800016c:	bf00      	nop
 800016e:	bf00      	nop
 8000170:	370c      	adds	r7, #12
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	200000bc 	.word	0x200000bc

0800017c <Set_Pin_Output>:

uint8_t RH_integral, RH_decimal, T_integral, T_decimal;
uint8_t CheckSUM, Presence = 0;

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b086      	sub	sp, #24
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	460b      	mov	r3, r1
 8000186:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000188:	f107 0308 	add.w	r3, r7, #8
 800018c:	2200      	movs	r2, #0
 800018e:	601a      	str	r2, [r3, #0]
 8000190:	605a      	str	r2, [r3, #4]
 8000192:	609a      	str	r2, [r3, #8]
 8000194:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000196:	887b      	ldrh	r3, [r7, #2]
 8000198:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800019a:	2301      	movs	r3, #1
 800019c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800019e:	2302      	movs	r3, #2
 80001a0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80001a2:	f107 0308 	add.w	r3, r7, #8
 80001a6:	4619      	mov	r1, r3
 80001a8:	6878      	ldr	r0, [r7, #4]
 80001aa:	f001 fa63 	bl	8001674 <HAL_GPIO_Init>
}
 80001ae:	bf00      	nop
 80001b0:	3718      	adds	r7, #24
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}

080001b6 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80001b6:	b580      	push	{r7, lr}
 80001b8:	b086      	sub	sp, #24
 80001ba:	af00      	add	r7, sp, #0
 80001bc:	6078      	str	r0, [r7, #4]
 80001be:	460b      	mov	r3, r1
 80001c0:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001c2:	f107 0308 	add.w	r3, r7, #8
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
 80001ca:	605a      	str	r2, [r3, #4]
 80001cc:	609a      	str	r2, [r3, #8]
 80001ce:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80001d0:	887b      	ldrh	r3, [r7, #2]
 80001d2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80001d4:	2300      	movs	r3, #0
 80001d6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001d8:	2301      	movs	r3, #1
 80001da:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80001dc:	f107 0308 	add.w	r3, r7, #8
 80001e0:	4619      	mov	r1, r3
 80001e2:	6878      	ldr	r0, [r7, #4]
 80001e4:	f001 fa46 	bl	8001674 <HAL_GPIO_Init>
}
 80001e8:	bf00      	nop
 80001ea:	3718      	adds	r7, #24
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}

080001f0 <DHT11_Start>:

void DHT11_Start(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
	Set_Pin_Output(GPIOA, GPIO_PIN_4);
 80001f4:	2110      	movs	r1, #16
 80001f6:	480c      	ldr	r0, [pc, #48]	; (8000228 <DHT11_Start+0x38>)
 80001f8:	f7ff ffc0 	bl	800017c <Set_Pin_Output>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	2110      	movs	r1, #16
 8000200:	4809      	ldr	r0, [pc, #36]	; (8000228 <DHT11_Start+0x38>)
 8000202:	f001 fbd2 	bl	80019aa <HAL_GPIO_WritePin>
	HAL_Delay(18);
 8000206:	2012      	movs	r0, #18
 8000208:	f000 fcd6 	bl	8000bb8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800020c:	2201      	movs	r2, #1
 800020e:	2110      	movs	r1, #16
 8000210:	4805      	ldr	r0, [pc, #20]	; (8000228 <DHT11_Start+0x38>)
 8000212:	f001 fbca 	bl	80019aa <HAL_GPIO_WritePin>
	delay_us(20);
 8000216:	2014      	movs	r0, #20
 8000218:	f7ff ff98 	bl	800014c <delay_us>
	Set_Pin_Input(GPIOA, GPIO_PIN_4);
 800021c:	2110      	movs	r1, #16
 800021e:	4802      	ldr	r0, [pc, #8]	; (8000228 <DHT11_Start+0x38>)
 8000220:	f7ff ffc9 	bl	80001b6 <Set_Pin_Input>
}
 8000224:	bf00      	nop
 8000226:	bd80      	pop	{r7, pc}
 8000228:	40010800 	.word	0x40010800

0800022c <DHT11_check_Response>:

uint8_t DHT11_check_Response(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000232:	2300      	movs	r3, #0
 8000234:	71fb      	strb	r3, [r7, #7]
	delay_us(40);
 8000236:	2028      	movs	r0, #40	; 0x28
 8000238:	f7ff ff88 	bl	800014c <delay_us>
	if(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)))
 800023c:	2110      	movs	r1, #16
 800023e:	4811      	ldr	r0, [pc, #68]	; (8000284 <DHT11_check_Response+0x58>)
 8000240:	f001 fb9c 	bl	800197c <HAL_GPIO_ReadPin>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d10e      	bne.n	8000268 <DHT11_check_Response+0x3c>
	{
		delay_us(80);
 800024a:	2050      	movs	r0, #80	; 0x50
 800024c:	f7ff ff7e 	bl	800014c <delay_us>
		if((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))) Response = 1;
 8000250:	2110      	movs	r1, #16
 8000252:	480c      	ldr	r0, [pc, #48]	; (8000284 <DHT11_check_Response+0x58>)
 8000254:	f001 fb92 	bl	800197c <HAL_GPIO_ReadPin>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d002      	beq.n	8000264 <DHT11_check_Response+0x38>
 800025e:	2301      	movs	r3, #1
 8000260:	71fb      	strb	r3, [r7, #7]
 8000262:	e001      	b.n	8000268 <DHT11_check_Response+0x3c>
		else Response = -1;
 8000264:	23ff      	movs	r3, #255	; 0xff
 8000266:	71fb      	strb	r3, [r7, #7]
	}
	while((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)));
 8000268:	bf00      	nop
 800026a:	2110      	movs	r1, #16
 800026c:	4805      	ldr	r0, [pc, #20]	; (8000284 <DHT11_check_Response+0x58>)
 800026e:	f001 fb85 	bl	800197c <HAL_GPIO_ReadPin>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d1f8      	bne.n	800026a <DHT11_check_Response+0x3e>

	return Response;
 8000278:	79fb      	ldrb	r3, [r7, #7]
}
 800027a:	4618      	mov	r0, r3
 800027c:	3708      	adds	r7, #8
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	40010800 	.word	0x40010800

08000288 <DHT11_Read>:

uint8_t DHT11_Read(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
	uint8_t data;
	for(uint8_t i = 0; i < 8; i++)
 800028e:	2300      	movs	r3, #0
 8000290:	71bb      	strb	r3, [r7, #6]
 8000292:	e025      	b.n	80002e0 <DHT11_Read+0x58>
	{
		while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)));
 8000294:	bf00      	nop
 8000296:	2110      	movs	r1, #16
 8000298:	4815      	ldr	r0, [pc, #84]	; (80002f0 <DHT11_Read+0x68>)
 800029a:	f001 fb6f 	bl	800197c <HAL_GPIO_ReadPin>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d0f8      	beq.n	8000296 <DHT11_Read+0xe>
		delay_us(40);
 80002a4:	2028      	movs	r0, #40	; 0x28
 80002a6:	f7ff ff51 	bl	800014c <delay_us>
		if(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)))
 80002aa:	2110      	movs	r1, #16
 80002ac:	4810      	ldr	r0, [pc, #64]	; (80002f0 <DHT11_Read+0x68>)
 80002ae:	f001 fb65 	bl	800197c <HAL_GPIO_ReadPin>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d103      	bne.n	80002c0 <DHT11_Read+0x38>
		{
			data = (data << 1);
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	005b      	lsls	r3, r3, #1
 80002bc:	71fb      	strb	r3, [r7, #7]
 80002be:	e004      	b.n	80002ca <DHT11_Read+0x42>
		}
		else data = (data << 1) + 1;
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	005b      	lsls	r3, r3, #1
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	3301      	adds	r3, #1
 80002c8:	71fb      	strb	r3, [r7, #7]

		while((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)));
 80002ca:	bf00      	nop
 80002cc:	2110      	movs	r1, #16
 80002ce:	4808      	ldr	r0, [pc, #32]	; (80002f0 <DHT11_Read+0x68>)
 80002d0:	f001 fb54 	bl	800197c <HAL_GPIO_ReadPin>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d1f8      	bne.n	80002cc <DHT11_Read+0x44>
	for(uint8_t i = 0; i < 8; i++)
 80002da:	79bb      	ldrb	r3, [r7, #6]
 80002dc:	3301      	adds	r3, #1
 80002de:	71bb      	strb	r3, [r7, #6]
 80002e0:	79bb      	ldrb	r3, [r7, #6]
 80002e2:	2b07      	cmp	r3, #7
 80002e4:	d9d6      	bls.n	8000294 <DHT11_Read+0xc>
	}
	return data;
 80002e6:	79fb      	ldrb	r3, [r7, #7]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	40010800 	.word	0x40010800

080002f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002fa:	f000 fbfb 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002fe:	f000 f88d 	bl	800041c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000302:	f000 f9ad 	bl	8000660 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000306:	f000 f981 	bl	800060c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800030a:	f000 f8df 	bl	80004cc <MX_ADC1_Init>
  MX_TIM1_Init();
 800030e:	f000 f92d 	bl	800056c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
//  uint32_t flame;
//  uint32_t cds;
  uint32_t ADC_DATA[2];
  HAL_TIM_Base_Start(&htim1);
 8000312:	4837      	ldr	r0, [pc, #220]	; (80003f0 <main+0xfc>)
 8000314:	f002 f964 	bl	80025e0 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DHT11_Start();
 8000318:	f7ff ff6a 	bl	80001f0 <DHT11_Start>
	  DHT11_check_Response();
 800031c:	f7ff ff86 	bl	800022c <DHT11_check_Response>

	  RH_integral = DHT11_Read();
 8000320:	f7ff ffb2 	bl	8000288 <DHT11_Read>
 8000324:	4603      	mov	r3, r0
 8000326:	461a      	mov	r2, r3
 8000328:	4b32      	ldr	r3, [pc, #200]	; (80003f4 <main+0x100>)
 800032a:	701a      	strb	r2, [r3, #0]
	  RH_decimal = DHT11_Read();
 800032c:	f7ff ffac 	bl	8000288 <DHT11_Read>
 8000330:	4603      	mov	r3, r0
 8000332:	461a      	mov	r2, r3
 8000334:	4b30      	ldr	r3, [pc, #192]	; (80003f8 <main+0x104>)
 8000336:	701a      	strb	r2, [r3, #0]
	  T_integral = DHT11_Read();
 8000338:	f7ff ffa6 	bl	8000288 <DHT11_Read>
 800033c:	4603      	mov	r3, r0
 800033e:	461a      	mov	r2, r3
 8000340:	4b2e      	ldr	r3, [pc, #184]	; (80003fc <main+0x108>)
 8000342:	701a      	strb	r2, [r3, #0]
	  T_decimal = DHT11_Read();
 8000344:	f7ff ffa0 	bl	8000288 <DHT11_Read>
 8000348:	4603      	mov	r3, r0
 800034a:	461a      	mov	r2, r3
 800034c:	4b2c      	ldr	r3, [pc, #176]	; (8000400 <main+0x10c>)
 800034e:	701a      	strb	r2, [r3, #0]
	  CheckSUM = DHT11_Read();
 8000350:	f7ff ff9a 	bl	8000288 <DHT11_Read>
 8000354:	4603      	mov	r3, r0
 8000356:	461a      	mov	r2, r3
 8000358:	4b2a      	ldr	r3, [pc, #168]	; (8000404 <main+0x110>)
 800035a:	701a      	strb	r2, [r3, #0]

	  if((RH_integral + RH_decimal + T_integral + T_decimal) == CheckSUM)
 800035c:	4b25      	ldr	r3, [pc, #148]	; (80003f4 <main+0x100>)
 800035e:	781b      	ldrb	r3, [r3, #0]
 8000360:	461a      	mov	r2, r3
 8000362:	4b25      	ldr	r3, [pc, #148]	; (80003f8 <main+0x104>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	4413      	add	r3, r2
 8000368:	4a24      	ldr	r2, [pc, #144]	; (80003fc <main+0x108>)
 800036a:	7812      	ldrb	r2, [r2, #0]
 800036c:	4413      	add	r3, r2
 800036e:	4a24      	ldr	r2, [pc, #144]	; (8000400 <main+0x10c>)
 8000370:	7812      	ldrb	r2, [r2, #0]
 8000372:	4413      	add	r3, r2
 8000374:	4a23      	ldr	r2, [pc, #140]	; (8000404 <main+0x110>)
 8000376:	7812      	ldrb	r2, [r2, #0]
 8000378:	4293      	cmp	r3, r2
 800037a:	d112      	bne.n	80003a2 <main+0xae>
	  {
		  printf("TEMPERATURE : %d.%d C\n", T_integral, T_decimal);
 800037c:	4b1f      	ldr	r3, [pc, #124]	; (80003fc <main+0x108>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	4619      	mov	r1, r3
 8000382:	4b1f      	ldr	r3, [pc, #124]	; (8000400 <main+0x10c>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	461a      	mov	r2, r3
 8000388:	481f      	ldr	r0, [pc, #124]	; (8000408 <main+0x114>)
 800038a:	f002 fd77 	bl	8002e7c <iprintf>
		  printf("HUMIDITY : 	%d.%d %%\n", RH_integral, RH_decimal);
 800038e:	4b19      	ldr	r3, [pc, #100]	; (80003f4 <main+0x100>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	4619      	mov	r1, r3
 8000394:	4b18      	ldr	r3, [pc, #96]	; (80003f8 <main+0x104>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	461a      	mov	r2, r3
 800039a:	481c      	ldr	r0, [pc, #112]	; (800040c <main+0x118>)
 800039c:	f002 fd6e 	bl	8002e7c <iprintf>
 80003a0:	e002      	b.n	80003a8 <main+0xb4>
	  }

	  else
	  {
		  printf("DHT11 ERROR!!\n");
 80003a2:	481b      	ldr	r0, [pc, #108]	; (8000410 <main+0x11c>)
 80003a4:	f002 fdf0 	bl	8002f88 <puts>
	  }

	HAL_ADC_Start(&hadc1);
 80003a8:	481a      	ldr	r0, [pc, #104]	; (8000414 <main+0x120>)
 80003aa:	f000 fd01 	bl	8000db0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 80003ae:	210a      	movs	r1, #10
 80003b0:	4818      	ldr	r0, [pc, #96]	; (8000414 <main+0x120>)
 80003b2:	f000 fdab 	bl	8000f0c <HAL_ADC_PollForConversion>
	ADC_DATA[0] = HAL_ADC_GetValue(&hadc1);
 80003b6:	4817      	ldr	r0, [pc, #92]	; (8000414 <main+0x120>)
 80003b8:	f000 feae 	bl	8001118 <HAL_ADC_GetValue>
 80003bc:	4603      	mov	r3, r0
 80003be:	603b      	str	r3, [r7, #0]

	HAL_ADC_Start(&hadc1);
 80003c0:	4814      	ldr	r0, [pc, #80]	; (8000414 <main+0x120>)
 80003c2:	f000 fcf5 	bl	8000db0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 80003c6:	210a      	movs	r1, #10
 80003c8:	4812      	ldr	r0, [pc, #72]	; (8000414 <main+0x120>)
 80003ca:	f000 fd9f 	bl	8000f0c <HAL_ADC_PollForConversion>
	ADC_DATA[1] = HAL_ADC_GetValue(&hadc1);
 80003ce:	4811      	ldr	r0, [pc, #68]	; (8000414 <main+0x120>)
 80003d0:	f000 fea2 	bl	8001118 <HAL_ADC_GetValue>
 80003d4:	4603      	mov	r3, r0
 80003d6:	607b      	str	r3, [r7, #4]

	printf("ADC_DATA : %d    %d\n\r", ADC_DATA[0], ADC_DATA[1]);
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	687a      	ldr	r2, [r7, #4]
 80003dc:	4619      	mov	r1, r3
 80003de:	480e      	ldr	r0, [pc, #56]	; (8000418 <main+0x124>)
 80003e0:	f002 fd4c 	bl	8002e7c <iprintf>
	HAL_Delay(1000);
 80003e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003e8:	f000 fbe6 	bl	8000bb8 <HAL_Delay>
	  DHT11_Start();
 80003ec:	e794      	b.n	8000318 <main+0x24>
 80003ee:	bf00      	nop
 80003f0:	200000bc 	.word	0x200000bc
 80003f4:	20000148 	.word	0x20000148
 80003f8:	20000149 	.word	0x20000149
 80003fc:	2000014a 	.word	0x2000014a
 8000400:	2000014b 	.word	0x2000014b
 8000404:	2000014c 	.word	0x2000014c
 8000408:	08003ea8 	.word	0x08003ea8
 800040c:	08003ec0 	.word	0x08003ec0
 8000410:	08003ed8 	.word	0x08003ed8
 8000414:	2000008c 	.word	0x2000008c
 8000418:	08003ee8 	.word	0x08003ee8

0800041c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b094      	sub	sp, #80	; 0x50
 8000420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000422:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000426:	2228      	movs	r2, #40	; 0x28
 8000428:	2100      	movs	r1, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f002 fd1e 	bl	8002e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000430:	f107 0314 	add.w	r3, r7, #20
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	605a      	str	r2, [r3, #4]
 800043a:	609a      	str	r2, [r3, #8]
 800043c:	60da      	str	r2, [r3, #12]
 800043e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800044c:	2302      	movs	r3, #2
 800044e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000450:	2301      	movs	r3, #1
 8000452:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000454:	2310      	movs	r3, #16
 8000456:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000458:	2302      	movs	r3, #2
 800045a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800045c:	2300      	movs	r3, #0
 800045e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000460:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000464:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800046a:	4618      	mov	r0, r3
 800046c:	f001 fad8 	bl	8001a20 <HAL_RCC_OscConfig>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000476:	f000 f973 	bl	8000760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047a:	230f      	movs	r3, #15
 800047c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800047e:	2302      	movs	r3, #2
 8000480:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000482:	2300      	movs	r3, #0
 8000484:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800048a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800048c:	2300      	movs	r3, #0
 800048e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000490:	f107 0314 	add.w	r3, r7, #20
 8000494:	2102      	movs	r1, #2
 8000496:	4618      	mov	r0, r3
 8000498:	f001 fd44 	bl	8001f24 <HAL_RCC_ClockConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80004a2:	f000 f95d 	bl	8000760 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004a6:	2302      	movs	r3, #2
 80004a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80004aa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80004ae:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b0:	1d3b      	adds	r3, r7, #4
 80004b2:	4618      	mov	r0, r3
 80004b4:	f001 fece 	bl	8002254 <HAL_RCCEx_PeriphCLKConfig>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80004be:	f000 f94f 	bl	8000760 <Error_Handler>
  }
}
 80004c2:	bf00      	nop
 80004c4:	3750      	adds	r7, #80	; 0x50
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
	...

080004cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004dc:	4b21      	ldr	r3, [pc, #132]	; (8000564 <MX_ADC1_Init+0x98>)
 80004de:	4a22      	ldr	r2, [pc, #136]	; (8000568 <MX_ADC1_Init+0x9c>)
 80004e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004e2:	4b20      	ldr	r3, [pc, #128]	; (8000564 <MX_ADC1_Init+0x98>)
 80004e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004ea:	4b1e      	ldr	r3, [pc, #120]	; (8000564 <MX_ADC1_Init+0x98>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80004f0:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <MX_ADC1_Init+0x98>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.NbrOfDiscConversion = 1;
 80004f6:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <MX_ADC1_Init+0x98>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	619a      	str	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004fc:	4b19      	ldr	r3, [pc, #100]	; (8000564 <MX_ADC1_Init+0x98>)
 80004fe:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000502:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000504:	4b17      	ldr	r3, [pc, #92]	; (8000564 <MX_ADC1_Init+0x98>)
 8000506:	2200      	movs	r2, #0
 8000508:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 800050a:	4b16      	ldr	r3, [pc, #88]	; (8000564 <MX_ADC1_Init+0x98>)
 800050c:	2202      	movs	r2, #2
 800050e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000510:	4814      	ldr	r0, [pc, #80]	; (8000564 <MX_ADC1_Init+0x98>)
 8000512:	f000 fb75 	bl	8000c00 <HAL_ADC_Init>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <MX_ADC1_Init+0x54>
  {
    Error_Handler();
 800051c:	f000 f920 	bl	8000760 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000520:	2300      	movs	r3, #0
 8000522:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000524:	2301      	movs	r3, #1
 8000526:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	4619      	mov	r1, r3
 8000530:	480c      	ldr	r0, [pc, #48]	; (8000564 <MX_ADC1_Init+0x98>)
 8000532:	f000 fdfd 	bl	8001130 <HAL_ADC_ConfigChannel>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800053c:	f000 f910 	bl	8000760 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000540:	2301      	movs	r3, #1
 8000542:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000544:	2302      	movs	r3, #2
 8000546:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000548:	1d3b      	adds	r3, r7, #4
 800054a:	4619      	mov	r1, r3
 800054c:	4805      	ldr	r0, [pc, #20]	; (8000564 <MX_ADC1_Init+0x98>)
 800054e:	f000 fdef 	bl	8001130 <HAL_ADC_ConfigChannel>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000558:	f000 f902 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800055c:	bf00      	nop
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	2000008c 	.word	0x2000008c
 8000568:	40012400 	.word	0x40012400

0800056c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000572:	f107 0308 	add.w	r3, r7, #8
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000580:	463b      	mov	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <MX_TIM1_Init+0x98>)
 800058a:	4a1f      	ldr	r2, [pc, #124]	; (8000608 <MX_TIM1_Init+0x9c>)
 800058c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 800058e:	4b1d      	ldr	r3, [pc, #116]	; (8000604 <MX_TIM1_Init+0x98>)
 8000590:	223f      	movs	r2, #63	; 0x3f
 8000592:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000594:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <MX_TIM1_Init+0x98>)
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800059a:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <MX_TIM1_Init+0x98>)
 800059c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a2:	4b18      	ldr	r3, [pc, #96]	; (8000604 <MX_TIM1_Init+0x98>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005a8:	4b16      	ldr	r3, [pc, #88]	; (8000604 <MX_TIM1_Init+0x98>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ae:	4b15      	ldr	r3, [pc, #84]	; (8000604 <MX_TIM1_Init+0x98>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005b4:	4813      	ldr	r0, [pc, #76]	; (8000604 <MX_TIM1_Init+0x98>)
 80005b6:	f001 ffc3 	bl	8002540 <HAL_TIM_Base_Init>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80005c0:	f000 f8ce 	bl	8000760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005ca:	f107 0308 	add.w	r3, r7, #8
 80005ce:	4619      	mov	r1, r3
 80005d0:	480c      	ldr	r0, [pc, #48]	; (8000604 <MX_TIM1_Init+0x98>)
 80005d2:	f002 f84f 	bl	8002674 <HAL_TIM_ConfigClockSource>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80005dc:	f000 f8c0 	bl	8000760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005e0:	2300      	movs	r3, #0
 80005e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005e8:	463b      	mov	r3, r7
 80005ea:	4619      	mov	r1, r3
 80005ec:	4805      	ldr	r0, [pc, #20]	; (8000604 <MX_TIM1_Init+0x98>)
 80005ee:	f002 f9fd 	bl	80029ec <HAL_TIMEx_MasterConfigSynchronization>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80005f8:	f000 f8b2 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005fc:	bf00      	nop
 80005fe:	3718      	adds	r7, #24
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200000bc 	.word	0x200000bc
 8000608:	40012c00 	.word	0x40012c00

0800060c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000610:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 8000612:	4a12      	ldr	r2, [pc, #72]	; (800065c <MX_USART2_UART_Init+0x50>)
 8000614:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 8000618:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800061c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 8000626:	2200      	movs	r2, #0
 8000628:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800062a:	4b0b      	ldr	r3, [pc, #44]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000630:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 8000632:	220c      	movs	r2, #12
 8000634:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800063c:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 800063e:	2200      	movs	r2, #0
 8000640:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000642:	4805      	ldr	r0, [pc, #20]	; (8000658 <MX_USART2_UART_Init+0x4c>)
 8000644:	f002 fa30 	bl	8002aa8 <HAL_UART_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800064e:	f000 f887 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000104 	.word	0x20000104
 800065c:	40004400 	.word	0x40004400

08000660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000666:	f107 0310 	add.w	r3, r7, #16
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000674:	4b2d      	ldr	r3, [pc, #180]	; (800072c <MX_GPIO_Init+0xcc>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a2c      	ldr	r2, [pc, #176]	; (800072c <MX_GPIO_Init+0xcc>)
 800067a:	f043 0310 	orr.w	r3, r3, #16
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b2a      	ldr	r3, [pc, #168]	; (800072c <MX_GPIO_Init+0xcc>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0310 	and.w	r3, r3, #16
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800068c:	4b27      	ldr	r3, [pc, #156]	; (800072c <MX_GPIO_Init+0xcc>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a26      	ldr	r2, [pc, #152]	; (800072c <MX_GPIO_Init+0xcc>)
 8000692:	f043 0320 	orr.w	r3, r3, #32
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b24      	ldr	r3, [pc, #144]	; (800072c <MX_GPIO_Init+0xcc>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0320 	and.w	r3, r3, #32
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a4:	4b21      	ldr	r3, [pc, #132]	; (800072c <MX_GPIO_Init+0xcc>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a20      	ldr	r2, [pc, #128]	; (800072c <MX_GPIO_Init+0xcc>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b1e      	ldr	r3, [pc, #120]	; (800072c <MX_GPIO_Init+0xcc>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0304 	and.w	r3, r3, #4
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_GPIO_Init+0xcc>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a1a      	ldr	r2, [pc, #104]	; (800072c <MX_GPIO_Init+0xcc>)
 80006c2:	f043 0308 	orr.w	r3, r3, #8
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <MX_GPIO_Init+0xcc>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0308 	and.w	r3, r3, #8
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2130      	movs	r1, #48	; 0x30
 80006d8:	4815      	ldr	r0, [pc, #84]	; (8000730 <MX_GPIO_Init+0xd0>)
 80006da:	f001 f966 	bl	80019aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006e4:	4b13      	ldr	r3, [pc, #76]	; (8000734 <MX_GPIO_Init+0xd4>)
 80006e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f107 0310 	add.w	r3, r7, #16
 80006f0:	4619      	mov	r1, r3
 80006f2:	4811      	ldr	r0, [pc, #68]	; (8000738 <MX_GPIO_Init+0xd8>)
 80006f4:	f000 ffbe 	bl	8001674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 80006f8:	2330      	movs	r3, #48	; 0x30
 80006fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2302      	movs	r3, #2
 8000706:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	f107 0310 	add.w	r3, r7, #16
 800070c:	4619      	mov	r1, r3
 800070e:	4808      	ldr	r0, [pc, #32]	; (8000730 <MX_GPIO_Init+0xd0>)
 8000710:	f000 ffb0 	bl	8001674 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000714:	2200      	movs	r2, #0
 8000716:	2100      	movs	r1, #0
 8000718:	2028      	movs	r0, #40	; 0x28
 800071a:	f000 ff74 	bl	8001606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800071e:	2028      	movs	r0, #40	; 0x28
 8000720:	f000 ff8d 	bl	800163e <HAL_NVIC_EnableIRQ>

}
 8000724:	bf00      	nop
 8000726:	3720      	adds	r7, #32
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40021000 	.word	0x40021000
 8000730:	40010800 	.word	0x40010800
 8000734:	10110000 	.word	0x10110000
 8000738:	40011000 	.word	0x40011000

0800073c <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000744:	1d39      	adds	r1, r7, #4
 8000746:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800074a:	2201      	movs	r2, #1
 800074c:	4803      	ldr	r0, [pc, #12]	; (800075c <__io_putchar+0x20>)
 800074e:	f002 f9f8 	bl	8002b42 <HAL_UART_Transmit>

  return ch;
 8000752:	687b      	ldr	r3, [r7, #4]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000104 	.word	0x20000104

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	e7fe      	b.n	8000768 <Error_Handler+0x8>
	...

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000772:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <HAL_MspInit+0x5c>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	4a14      	ldr	r2, [pc, #80]	; (80007c8 <HAL_MspInit+0x5c>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6193      	str	r3, [r2, #24]
 800077e:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <HAL_MspInit+0x5c>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <HAL_MspInit+0x5c>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	4a0e      	ldr	r2, [pc, #56]	; (80007c8 <HAL_MspInit+0x5c>)
 8000790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000794:	61d3      	str	r3, [r2, #28]
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <HAL_MspInit+0x5c>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007a2:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <HAL_MspInit+0x60>)
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	4a04      	ldr	r2, [pc, #16]	; (80007cc <HAL_MspInit+0x60>)
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007be:	bf00      	nop
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40010000 	.word	0x40010000

080007d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a14      	ldr	r2, [pc, #80]	; (800083c <HAL_ADC_MspInit+0x6c>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d121      	bne.n	8000834 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007f0:	4b13      	ldr	r3, [pc, #76]	; (8000840 <HAL_ADC_MspInit+0x70>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4a12      	ldr	r2, [pc, #72]	; (8000840 <HAL_ADC_MspInit+0x70>)
 80007f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007fa:	6193      	str	r3, [r2, #24]
 80007fc:	4b10      	ldr	r3, [pc, #64]	; (8000840 <HAL_ADC_MspInit+0x70>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000808:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <HAL_ADC_MspInit+0x70>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a0c      	ldr	r2, [pc, #48]	; (8000840 <HAL_ADC_MspInit+0x70>)
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <HAL_ADC_MspInit+0x70>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f003 0304 	and.w	r3, r3, #4
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000820:	2303      	movs	r3, #3
 8000822:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000824:	2303      	movs	r3, #3
 8000826:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	4619      	mov	r1, r3
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <HAL_ADC_MspInit+0x74>)
 8000830:	f000 ff20 	bl	8001674 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000834:	bf00      	nop
 8000836:	3720      	adds	r7, #32
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40012400 	.word	0x40012400
 8000840:	40021000 	.word	0x40021000
 8000844:	40010800 	.word	0x40010800

08000848 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a09      	ldr	r2, [pc, #36]	; (800087c <HAL_TIM_Base_MspInit+0x34>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d10b      	bne.n	8000872 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_TIM_Base_MspInit+0x38>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <HAL_TIM_Base_MspInit+0x38>)
 8000860:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000864:	6193      	str	r3, [r2, #24]
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_TIM_Base_MspInit+0x38>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000872:	bf00      	nop
 8000874:	3714      	adds	r7, #20
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr
 800087c:	40012c00 	.word	0x40012c00
 8000880:	40021000 	.word	0x40021000

08000884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 0310 	add.w	r3, r7, #16
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a15      	ldr	r2, [pc, #84]	; (80008f4 <HAL_UART_MspInit+0x70>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d123      	bne.n	80008ec <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <HAL_UART_MspInit+0x74>)
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	4a13      	ldr	r2, [pc, #76]	; (80008f8 <HAL_UART_MspInit+0x74>)
 80008aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ae:	61d3      	str	r3, [r2, #28]
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <HAL_UART_MspInit+0x74>)
 80008b2:	69db      	ldr	r3, [r3, #28]
 80008b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008bc:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <HAL_UART_MspInit+0x74>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a0d      	ldr	r2, [pc, #52]	; (80008f8 <HAL_UART_MspInit+0x74>)
 80008c2:	f043 0304 	orr.w	r3, r3, #4
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <HAL_UART_MspInit+0x74>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008d4:	230c      	movs	r3, #12
 80008d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2302      	movs	r3, #2
 80008de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4619      	mov	r1, r3
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <HAL_UART_MspInit+0x78>)
 80008e8:	f000 fec4 	bl	8001674 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008ec:	bf00      	nop
 80008ee:	3720      	adds	r7, #32
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40004400 	.word	0x40004400
 80008f8:	40021000 	.word	0x40021000
 80008fc:	40010800 	.word	0x40010800

08000900 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <NMI_Handler+0x4>

08000906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <MemManage_Handler+0x4>

08000912 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <BusFault_Handler+0x4>

08000918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <UsageFault_Handler+0x4>

0800091e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr

0800092a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr

08000936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr

08000942 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000946:	f000 f91b 	bl	8000b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}

0800094e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000952:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000956:	f001 f841 	bl	80019dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}

0800095e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b086      	sub	sp, #24
 8000962:	af00      	add	r7, sp, #0
 8000964:	60f8      	str	r0, [r7, #12]
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	e00a      	b.n	8000986 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000970:	f3af 8000 	nop.w
 8000974:	4601      	mov	r1, r0
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	1c5a      	adds	r2, r3, #1
 800097a:	60ba      	str	r2, [r7, #8]
 800097c:	b2ca      	uxtb	r2, r1
 800097e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	3301      	adds	r3, #1
 8000984:	617b      	str	r3, [r7, #20]
 8000986:	697a      	ldr	r2, [r7, #20]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	429a      	cmp	r2, r3
 800098c:	dbf0      	blt.n	8000970 <_read+0x12>
	}

return len;
 800098e:	687b      	ldr	r3, [r7, #4]
}
 8000990:	4618      	mov	r0, r3
 8000992:	3718      	adds	r7, #24
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	e009      	b.n	80009be <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	1c5a      	adds	r2, r3, #1
 80009ae:	60ba      	str	r2, [r7, #8]
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fec2 	bl	800073c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	3301      	adds	r3, #1
 80009bc:	617b      	str	r3, [r7, #20]
 80009be:	697a      	ldr	r2, [r7, #20]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	dbf1      	blt.n	80009aa <_write+0x12>
	}
	return len;
 80009c6:	687b      	ldr	r3, [r7, #4]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3718      	adds	r7, #24
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <_close>:

int _close(int file)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	return -1;
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009dc:	4618      	mov	r0, r3
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr

080009e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009e6:	b480      	push	{r7}
 80009e8:	b083      	sub	sp, #12
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
 80009ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009f6:	605a      	str	r2, [r3, #4]
	return 0;
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr

08000a04 <_isatty>:

int _isatty(int file)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	return 1;
 8000a0c:	2301      	movs	r3, #1
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
	return 0;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr

08000a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a38:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <_sbrk+0x5c>)
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <_sbrk+0x60>)
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <_sbrk+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d102      	bne.n	8000a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <_sbrk+0x64>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <_sbrk+0x68>)
 8000a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d207      	bcs.n	8000a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a60:	f002 f9da 	bl	8002e18 <__errno>
 8000a64:	4603      	mov	r3, r0
 8000a66:	220c      	movs	r2, #12
 8000a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6e:	e009      	b.n	8000a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a76:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <_sbrk+0x64>)
 8000a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a82:	68fb      	ldr	r3, [r7, #12]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20005000 	.word	0x20005000
 8000a90:	00000400 	.word	0x00000400
 8000a94:	20000150 	.word	0x20000150
 8000a98:	20000168 	.word	0x20000168

08000a9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aaa:	490d      	ldr	r1, [pc, #52]	; (8000ae0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aac:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab0:	e002      	b.n	8000ab8 <LoopCopyDataInit>

08000ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab6:	3304      	adds	r3, #4

08000ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000abc:	d3f9      	bcc.n	8000ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000abe:	4a0a      	ldr	r2, [pc, #40]	; (8000ae8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ac0:	4c0a      	ldr	r4, [pc, #40]	; (8000aec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac4:	e001      	b.n	8000aca <LoopFillZerobss>

08000ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac8:	3204      	adds	r2, #4

08000aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000acc:	d3fb      	bcc.n	8000ac6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ace:	f7ff ffe5 	bl	8000a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f002 f9a7 	bl	8002e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ad6:	f7ff fc0d 	bl	80002f4 <main>
  bx lr
 8000ada:	4770      	bx	lr
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ae4:	08003fd8 	.word	0x08003fd8
  ldr r2, =_sbss
 8000ae8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000aec:	20000168 	.word	0x20000168

08000af0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC1_2_IRQHandler>
	...

08000af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_Init+0x28>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <HAL_Init+0x28>)
 8000afe:	f043 0310 	orr.w	r3, r3, #16
 8000b02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b04:	2003      	movs	r0, #3
 8000b06:	f000 fd73 	bl	80015f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f000 f808 	bl	8000b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b10:	f7ff fe2c 	bl	800076c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40022000 	.word	0x40022000

08000b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_InitTick+0x54>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_InitTick+0x58>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4619      	mov	r1, r3
 8000b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 fd8b 	bl	800165a <HAL_SYSTICK_Config>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00e      	b.n	8000b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b0f      	cmp	r3, #15
 8000b52:	d80a      	bhi.n	8000b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b54:	2200      	movs	r2, #0
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f000 fd53 	bl	8001606 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b60:	4a06      	ldr	r2, [pc, #24]	; (8000b7c <HAL_InitTick+0x5c>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e000      	b.n	8000b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000000 	.word	0x20000000
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	20000004 	.word	0x20000004

08000b80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_IncTick+0x1c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	4a03      	ldr	r2, [pc, #12]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000154 	.word	0x20000154

08000ba4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b02      	ldr	r3, [pc, #8]	; (8000bb4 <HAL_GetTick+0x10>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	20000154 	.word	0x20000154

08000bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc0:	f7ff fff0 	bl	8000ba4 <HAL_GetTick>
 8000bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd0:	d005      	beq.n	8000bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <HAL_Delay+0x44>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4413      	add	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bde:	bf00      	nop
 8000be0:	f7ff ffe0 	bl	8000ba4 <HAL_GetTick>
 8000be4:	4602      	mov	r2, r0
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d8f7      	bhi.n	8000be0 <HAL_Delay+0x28>
  {
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000008 	.word	0x20000008

08000c00 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d101      	bne.n	8000c22 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e0be      	b.n	8000da0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d109      	bne.n	8000c44 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2200      	movs	r2, #0
 8000c34:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff fdc6 	bl	80007d0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f000 fbc5 	bl	80013d4 <ADC_ConversionStop_Disable>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c52:	f003 0310 	and.w	r3, r3, #16
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f040 8099 	bne.w	8000d8e <HAL_ADC_Init+0x18e>
 8000c5c:	7dfb      	ldrb	r3, [r7, #23]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f040 8095 	bne.w	8000d8e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c68:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c6c:	f023 0302 	bic.w	r3, r3, #2
 8000c70:	f043 0202 	orr.w	r2, r3, #2
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c80:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	7b1b      	ldrb	r3, [r3, #12]
 8000c86:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c88:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c98:	d003      	beq.n	8000ca2 <HAL_ADC_Init+0xa2>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d102      	bne.n	8000ca8 <HAL_ADC_Init+0xa8>
 8000ca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca6:	e000      	b.n	8000caa <HAL_ADC_Init+0xaa>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	7d1b      	ldrb	r3, [r3, #20]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d119      	bne.n	8000cec <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	7b1b      	ldrb	r3, [r3, #12]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d109      	bne.n	8000cd4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	035a      	lsls	r2, r3, #13
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	e00b      	b.n	8000cec <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd8:	f043 0220 	orr.w	r2, r3, #32
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce4:	f043 0201 	orr.w	r2, r3, #1
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	689a      	ldr	r2, [r3, #8]
 8000d06:	4b28      	ldr	r3, [pc, #160]	; (8000da8 <HAL_ADC_Init+0x1a8>)
 8000d08:	4013      	ands	r3, r2
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	6812      	ldr	r2, [r2, #0]
 8000d0e:	68b9      	ldr	r1, [r7, #8]
 8000d10:	430b      	orrs	r3, r1
 8000d12:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d1c:	d003      	beq.n	8000d26 <HAL_ADC_Init+0x126>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d104      	bne.n	8000d30 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	691b      	ldr	r3, [r3, #16]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	051b      	lsls	r3, r3, #20
 8000d2e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d36:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	430a      	orrs	r2, r1
 8000d42:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	689a      	ldr	r2, [r3, #8]
 8000d4a:	4b18      	ldr	r3, [pc, #96]	; (8000dac <HAL_ADC_Init+0x1ac>)
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d10b      	bne.n	8000d6c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5e:	f023 0303 	bic.w	r3, r3, #3
 8000d62:	f043 0201 	orr.w	r2, r3, #1
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d6a:	e018      	b.n	8000d9e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d70:	f023 0312 	bic.w	r3, r3, #18
 8000d74:	f043 0210 	orr.w	r2, r3, #16
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d80:	f043 0201 	orr.w	r2, r3, #1
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d8c:	e007      	b.n	8000d9e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d92:	f043 0210 	orr.w	r2, r3, #16
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	ffe1f7fd 	.word	0xffe1f7fd
 8000dac:	ff1f0efe 	.word	0xff1f0efe

08000db0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000db8:	2300      	movs	r3, #0
 8000dba:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d101      	bne.n	8000dca <HAL_ADC_Start+0x1a>
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	e098      	b.n	8000efc <HAL_ADC_Start+0x14c>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f000 faa4 	bl	8001320 <ADC_Enable>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	f040 8087 	bne.w	8000ef2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dec:	f023 0301 	bic.w	r3, r3, #1
 8000df0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a41      	ldr	r2, [pc, #260]	; (8000f04 <HAL_ADC_Start+0x154>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d105      	bne.n	8000e0e <HAL_ADC_Start+0x5e>
 8000e02:	4b41      	ldr	r3, [pc, #260]	; (8000f08 <HAL_ADC_Start+0x158>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d115      	bne.n	8000e3a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d026      	beq.n	8000e76 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e38:	e01d      	b.n	8000e76 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a2f      	ldr	r2, [pc, #188]	; (8000f08 <HAL_ADC_Start+0x158>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d004      	beq.n	8000e5a <HAL_ADC_Start+0xaa>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a2b      	ldr	r2, [pc, #172]	; (8000f04 <HAL_ADC_Start+0x154>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d10d      	bne.n	8000e76 <HAL_ADC_Start+0xc6>
 8000e5a:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <HAL_ADC_Start+0x158>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d007      	beq.n	8000e76 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e6e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d006      	beq.n	8000e90 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e86:	f023 0206 	bic.w	r2, r3, #6
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e8e:	e002      	b.n	8000e96 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f06f 0202 	mvn.w	r2, #2
 8000ea6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000eb2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000eb6:	d113      	bne.n	8000ee0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ebc:	4a11      	ldr	r2, [pc, #68]	; (8000f04 <HAL_ADC_Start+0x154>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d105      	bne.n	8000ece <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <HAL_ADC_Start+0x158>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d108      	bne.n	8000ee0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	e00c      	b.n	8000efa <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	e003      	b.n	8000efa <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40012800 	.word	0x40012800
 8000f08:	40012400 	.word	0x40012400

08000f0c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b087      	sub	sp, #28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f22:	f7ff fe3f 	bl	8000ba4 <HAL_GetTick>
 8000f26:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d00b      	beq.n	8000f4e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3a:	f043 0220 	orr.w	r2, r3, #32
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e0d3      	b.n	80010f6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d131      	bne.n	8000fc0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f62:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d12a      	bne.n	8000fc0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f6a:	e021      	b.n	8000fb0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f72:	d01d      	beq.n	8000fb0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d007      	beq.n	8000f8a <HAL_ADC_PollForConversion+0x7e>
 8000f7a:	f7ff fe13 	bl	8000ba4 <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	683a      	ldr	r2, [r7, #0]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d212      	bcs.n	8000fb0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d10b      	bne.n	8000fb0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9c:	f043 0204 	orr.w	r2, r3, #4
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e0a2      	b.n	80010f6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0d6      	beq.n	8000f6c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000fbe:	e070      	b.n	80010a2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000fc0:	4b4f      	ldr	r3, [pc, #316]	; (8001100 <HAL_ADC_PollForConversion+0x1f4>)
 8000fc2:	681c      	ldr	r4, [r3, #0]
 8000fc4:	2002      	movs	r0, #2
 8000fc6:	f001 f9fb 	bl	80023c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	6919      	ldr	r1, [r3, #16]
 8000fd6:	4b4b      	ldr	r3, [pc, #300]	; (8001104 <HAL_ADC_PollForConversion+0x1f8>)
 8000fd8:	400b      	ands	r3, r1
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d118      	bne.n	8001010 <HAL_ADC_PollForConversion+0x104>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	68d9      	ldr	r1, [r3, #12]
 8000fe4:	4b48      	ldr	r3, [pc, #288]	; (8001108 <HAL_ADC_PollForConversion+0x1fc>)
 8000fe6:	400b      	ands	r3, r1
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d111      	bne.n	8001010 <HAL_ADC_PollForConversion+0x104>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6919      	ldr	r1, [r3, #16]
 8000ff2:	4b46      	ldr	r3, [pc, #280]	; (800110c <HAL_ADC_PollForConversion+0x200>)
 8000ff4:	400b      	ands	r3, r1
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d108      	bne.n	800100c <HAL_ADC_PollForConversion+0x100>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68d9      	ldr	r1, [r3, #12]
 8001000:	4b43      	ldr	r3, [pc, #268]	; (8001110 <HAL_ADC_PollForConversion+0x204>)
 8001002:	400b      	ands	r3, r1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <HAL_ADC_PollForConversion+0x100>
 8001008:	2314      	movs	r3, #20
 800100a:	e020      	b.n	800104e <HAL_ADC_PollForConversion+0x142>
 800100c:	2329      	movs	r3, #41	; 0x29
 800100e:	e01e      	b.n	800104e <HAL_ADC_PollForConversion+0x142>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	6919      	ldr	r1, [r3, #16]
 8001016:	4b3d      	ldr	r3, [pc, #244]	; (800110c <HAL_ADC_PollForConversion+0x200>)
 8001018:	400b      	ands	r3, r1
 800101a:	2b00      	cmp	r3, #0
 800101c:	d106      	bne.n	800102c <HAL_ADC_PollForConversion+0x120>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	68d9      	ldr	r1, [r3, #12]
 8001024:	4b3a      	ldr	r3, [pc, #232]	; (8001110 <HAL_ADC_PollForConversion+0x204>)
 8001026:	400b      	ands	r3, r1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00d      	beq.n	8001048 <HAL_ADC_PollForConversion+0x13c>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6919      	ldr	r1, [r3, #16]
 8001032:	4b38      	ldr	r3, [pc, #224]	; (8001114 <HAL_ADC_PollForConversion+0x208>)
 8001034:	400b      	ands	r3, r1
 8001036:	2b00      	cmp	r3, #0
 8001038:	d108      	bne.n	800104c <HAL_ADC_PollForConversion+0x140>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	68d9      	ldr	r1, [r3, #12]
 8001040:	4b34      	ldr	r3, [pc, #208]	; (8001114 <HAL_ADC_PollForConversion+0x208>)
 8001042:	400b      	ands	r3, r1
 8001044:	2b00      	cmp	r3, #0
 8001046:	d101      	bne.n	800104c <HAL_ADC_PollForConversion+0x140>
 8001048:	2354      	movs	r3, #84	; 0x54
 800104a:	e000      	b.n	800104e <HAL_ADC_PollForConversion+0x142>
 800104c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800104e:	fb02 f303 	mul.w	r3, r2, r3
 8001052:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001054:	e021      	b.n	800109a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800105c:	d01a      	beq.n	8001094 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d007      	beq.n	8001074 <HAL_ADC_PollForConversion+0x168>
 8001064:	f7ff fd9e 	bl	8000ba4 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	429a      	cmp	r2, r3
 8001072:	d20f      	bcs.n	8001094 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	429a      	cmp	r2, r3
 800107a:	d90b      	bls.n	8001094 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001080:	f043 0204 	orr.w	r2, r3, #4
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e030      	b.n	80010f6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	3301      	adds	r3, #1
 8001098:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d8d9      	bhi.n	8001056 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f06f 0212 	mvn.w	r2, #18
 80010aa:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80010c2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80010c6:	d115      	bne.n	80010f4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d111      	bne.n	80010f4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d105      	bne.n	80010f4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ec:	f043 0201 	orr.w	r2, r3, #1
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	371c      	adds	r7, #28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd90      	pop	{r4, r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000000 	.word	0x20000000
 8001104:	24924924 	.word	0x24924924
 8001108:	00924924 	.word	0x00924924
 800110c:	12492492 	.word	0x12492492
 8001110:	00492492 	.word	0x00492492
 8001114:	00249249 	.word	0x00249249

08001118 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800113a:	2300      	movs	r3, #0
 800113c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001148:	2b01      	cmp	r3, #1
 800114a:	d101      	bne.n	8001150 <HAL_ADC_ConfigChannel+0x20>
 800114c:	2302      	movs	r3, #2
 800114e:	e0dc      	b.n	800130a <HAL_ADC_ConfigChannel+0x1da>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2201      	movs	r2, #1
 8001154:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b06      	cmp	r3, #6
 800115e:	d81c      	bhi.n	800119a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	4613      	mov	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	3b05      	subs	r3, #5
 8001172:	221f      	movs	r2, #31
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	4019      	ands	r1, r3
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	4613      	mov	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	3b05      	subs	r3, #5
 800118c:	fa00 f203 	lsl.w	r2, r0, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	430a      	orrs	r2, r1
 8001196:	635a      	str	r2, [r3, #52]	; 0x34
 8001198:	e03c      	b.n	8001214 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b0c      	cmp	r3, #12
 80011a0:	d81c      	bhi.n	80011dc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	3b23      	subs	r3, #35	; 0x23
 80011b4:	221f      	movs	r2, #31
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	4019      	ands	r1, r3
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	6818      	ldr	r0, [r3, #0]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	3b23      	subs	r3, #35	; 0x23
 80011ce:	fa00 f203 	lsl.w	r2, r0, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	430a      	orrs	r2, r1
 80011d8:	631a      	str	r2, [r3, #48]	; 0x30
 80011da:	e01b      	b.n	8001214 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	3b41      	subs	r3, #65	; 0x41
 80011ee:	221f      	movs	r2, #31
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	4019      	ands	r1, r3
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	6818      	ldr	r0, [r3, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	3b41      	subs	r3, #65	; 0x41
 8001208:	fa00 f203 	lsl.w	r2, r0, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	430a      	orrs	r2, r1
 8001212:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b09      	cmp	r3, #9
 800121a:	d91c      	bls.n	8001256 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68d9      	ldr	r1, [r3, #12]
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	4613      	mov	r3, r2
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	4413      	add	r3, r2
 800122c:	3b1e      	subs	r3, #30
 800122e:	2207      	movs	r2, #7
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	4019      	ands	r1, r3
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	6898      	ldr	r0, [r3, #8]
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4613      	mov	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	3b1e      	subs	r3, #30
 8001248:	fa00 f203 	lsl.w	r2, r0, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	430a      	orrs	r2, r1
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	e019      	b.n	800128a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6919      	ldr	r1, [r3, #16]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4613      	mov	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	2207      	movs	r2, #7
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	4019      	ands	r1, r3
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	6898      	ldr	r0, [r3, #8]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4613      	mov	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	fa00 f203 	lsl.w	r2, r0, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b10      	cmp	r3, #16
 8001290:	d003      	beq.n	800129a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001296:	2b11      	cmp	r3, #17
 8001298:	d132      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a1d      	ldr	r2, [pc, #116]	; (8001314 <HAL_ADC_ConfigChannel+0x1e4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d125      	bne.n	80012f0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d126      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80012c0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b10      	cmp	r3, #16
 80012c8:	d11a      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <HAL_ADC_ConfigChannel+0x1e8>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a13      	ldr	r2, [pc, #76]	; (800131c <HAL_ADC_ConfigChannel+0x1ec>)
 80012d0:	fba2 2303 	umull	r2, r3, r2, r3
 80012d4:	0c9a      	lsrs	r2, r3, #18
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012e0:	e002      	b.n	80012e8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f9      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x1b2>
 80012ee:	e007      	b.n	8001300 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f4:	f043 0220 	orr.w	r2, r3, #32
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001308:	7bfb      	ldrb	r3, [r7, #15]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	40012400 	.word	0x40012400
 8001318:	20000000 	.word	0x20000000
 800131c:	431bde83 	.word	0x431bde83

08001320 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800132c:	2300      	movs	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b01      	cmp	r3, #1
 800133c:	d040      	beq.n	80013c0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f042 0201 	orr.w	r2, r2, #1
 800134c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800134e:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <ADC_Enable+0xac>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a1f      	ldr	r2, [pc, #124]	; (80013d0 <ADC_Enable+0xb0>)
 8001354:	fba2 2303 	umull	r2, r3, r2, r3
 8001358:	0c9b      	lsrs	r3, r3, #18
 800135a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800135c:	e002      	b.n	8001364 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	3b01      	subs	r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f9      	bne.n	800135e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800136a:	f7ff fc1b 	bl	8000ba4 <HAL_GetTick>
 800136e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001370:	e01f      	b.n	80013b2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001372:	f7ff fc17 	bl	8000ba4 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d918      	bls.n	80013b2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b01      	cmp	r3, #1
 800138c:	d011      	beq.n	80013b2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001392:	f043 0210 	orr.w	r2, r3, #16
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139e:	f043 0201 	orr.w	r2, r3, #1
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e007      	b.n	80013c2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d1d8      	bne.n	8001372 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000000 	.word	0x20000000
 80013d0:	431bde83 	.word	0x431bde83

080013d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d12e      	bne.n	800144c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0201 	bic.w	r2, r2, #1
 80013fc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013fe:	f7ff fbd1 	bl	8000ba4 <HAL_GetTick>
 8001402:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001404:	e01b      	b.n	800143e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001406:	f7ff fbcd 	bl	8000ba4 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d914      	bls.n	800143e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d10d      	bne.n	800143e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001426:	f043 0210 	orr.w	r2, r3, #16
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001432:	f043 0201 	orr.w	r2, r3, #1
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e007      	b.n	800144e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d0dc      	beq.n	8001406 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <__NVIC_SetPriorityGrouping+0x44>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001474:	4013      	ands	r3, r2
 8001476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148a:	4a04      	ldr	r2, [pc, #16]	; (800149c <__NVIC_SetPriorityGrouping+0x44>)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	60d3      	str	r3, [r2, #12]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <__NVIC_GetPriorityGrouping+0x18>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	0a1b      	lsrs	r3, r3, #8
 80014aa:	f003 0307 	and.w	r3, r3, #7
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	db0b      	blt.n	80014e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	f003 021f 	and.w	r2, r3, #31
 80014d4:	4906      	ldr	r1, [pc, #24]	; (80014f0 <__NVIC_EnableIRQ+0x34>)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	2001      	movs	r0, #1
 80014de:	fa00 f202 	lsl.w	r2, r0, r2
 80014e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	e000e100 	.word	0xe000e100

080014f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	6039      	str	r1, [r7, #0]
 80014fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	2b00      	cmp	r3, #0
 8001506:	db0a      	blt.n	800151e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	b2da      	uxtb	r2, r3
 800150c:	490c      	ldr	r1, [pc, #48]	; (8001540 <__NVIC_SetPriority+0x4c>)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	0112      	lsls	r2, r2, #4
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	440b      	add	r3, r1
 8001518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800151c:	e00a      	b.n	8001534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4908      	ldr	r1, [pc, #32]	; (8001544 <__NVIC_SetPriority+0x50>)
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	3b04      	subs	r3, #4
 800152c:	0112      	lsls	r2, r2, #4
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	440b      	add	r3, r1
 8001532:	761a      	strb	r2, [r3, #24]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000e100 	.word	0xe000e100
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f1c3 0307 	rsb	r3, r3, #7
 8001562:	2b04      	cmp	r3, #4
 8001564:	bf28      	it	cs
 8001566:	2304      	movcs	r3, #4
 8001568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3304      	adds	r3, #4
 800156e:	2b06      	cmp	r3, #6
 8001570:	d902      	bls.n	8001578 <NVIC_EncodePriority+0x30>
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3b03      	subs	r3, #3
 8001576:	e000      	b.n	800157a <NVIC_EncodePriority+0x32>
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	f04f 32ff 	mov.w	r2, #4294967295
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43da      	mvns	r2, r3
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	401a      	ands	r2, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001590:	f04f 31ff 	mov.w	r1, #4294967295
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	fa01 f303 	lsl.w	r3, r1, r3
 800159a:	43d9      	mvns	r1, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	4313      	orrs	r3, r2
         );
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3724      	adds	r7, #36	; 0x24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015bc:	d301      	bcc.n	80015c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015be:	2301      	movs	r3, #1
 80015c0:	e00f      	b.n	80015e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c2:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <SysTick_Config+0x40>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ca:	210f      	movs	r1, #15
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	f7ff ff90 	bl	80014f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <SysTick_Config+0x40>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <SysTick_Config+0x40>)
 80015dc:	2207      	movs	r2, #7
 80015de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	e000e010 	.word	0xe000e010

080015f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ff2d 	bl	8001458 <__NVIC_SetPriorityGrouping>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001606:	b580      	push	{r7, lr}
 8001608:	b086      	sub	sp, #24
 800160a:	af00      	add	r7, sp, #0
 800160c:	4603      	mov	r3, r0
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001618:	f7ff ff42 	bl	80014a0 <__NVIC_GetPriorityGrouping>
 800161c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	6978      	ldr	r0, [r7, #20]
 8001624:	f7ff ff90 	bl	8001548 <NVIC_EncodePriority>
 8001628:	4602      	mov	r2, r0
 800162a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ff5f 	bl	80014f4 <__NVIC_SetPriority>
}
 8001636:	bf00      	nop
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff35 	bl	80014bc <__NVIC_EnableIRQ>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffa2 	bl	80015ac <SysTick_Config>
 8001668:	4603      	mov	r3, r0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001674:	b480      	push	{r7}
 8001676:	b08b      	sub	sp, #44	; 0x2c
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800167e:	2300      	movs	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001682:	2300      	movs	r3, #0
 8001684:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001686:	e169      	b.n	800195c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001688:	2201      	movs	r2, #1
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	f040 8158 	bne.w	8001956 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	4a9a      	ldr	r2, [pc, #616]	; (8001914 <HAL_GPIO_Init+0x2a0>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d05e      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016b0:	4a98      	ldr	r2, [pc, #608]	; (8001914 <HAL_GPIO_Init+0x2a0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d875      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016b6:	4a98      	ldr	r2, [pc, #608]	; (8001918 <HAL_GPIO_Init+0x2a4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d058      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016bc:	4a96      	ldr	r2, [pc, #600]	; (8001918 <HAL_GPIO_Init+0x2a4>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d86f      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016c2:	4a96      	ldr	r2, [pc, #600]	; (800191c <HAL_GPIO_Init+0x2a8>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d052      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016c8:	4a94      	ldr	r2, [pc, #592]	; (800191c <HAL_GPIO_Init+0x2a8>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d869      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016ce:	4a94      	ldr	r2, [pc, #592]	; (8001920 <HAL_GPIO_Init+0x2ac>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d04c      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016d4:	4a92      	ldr	r2, [pc, #584]	; (8001920 <HAL_GPIO_Init+0x2ac>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d863      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016da:	4a92      	ldr	r2, [pc, #584]	; (8001924 <HAL_GPIO_Init+0x2b0>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d046      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016e0:	4a90      	ldr	r2, [pc, #576]	; (8001924 <HAL_GPIO_Init+0x2b0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d85d      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016e6:	2b12      	cmp	r3, #18
 80016e8:	d82a      	bhi.n	8001740 <HAL_GPIO_Init+0xcc>
 80016ea:	2b12      	cmp	r3, #18
 80016ec:	d859      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016ee:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <HAL_GPIO_Init+0x80>)
 80016f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f4:	0800176f 	.word	0x0800176f
 80016f8:	08001749 	.word	0x08001749
 80016fc:	0800175b 	.word	0x0800175b
 8001700:	0800179d 	.word	0x0800179d
 8001704:	080017a3 	.word	0x080017a3
 8001708:	080017a3 	.word	0x080017a3
 800170c:	080017a3 	.word	0x080017a3
 8001710:	080017a3 	.word	0x080017a3
 8001714:	080017a3 	.word	0x080017a3
 8001718:	080017a3 	.word	0x080017a3
 800171c:	080017a3 	.word	0x080017a3
 8001720:	080017a3 	.word	0x080017a3
 8001724:	080017a3 	.word	0x080017a3
 8001728:	080017a3 	.word	0x080017a3
 800172c:	080017a3 	.word	0x080017a3
 8001730:	080017a3 	.word	0x080017a3
 8001734:	080017a3 	.word	0x080017a3
 8001738:	08001751 	.word	0x08001751
 800173c:	08001765 	.word	0x08001765
 8001740:	4a79      	ldr	r2, [pc, #484]	; (8001928 <HAL_GPIO_Init+0x2b4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d013      	beq.n	800176e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001746:	e02c      	b.n	80017a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	623b      	str	r3, [r7, #32]
          break;
 800174e:	e029      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	3304      	adds	r3, #4
 8001756:	623b      	str	r3, [r7, #32]
          break;
 8001758:	e024      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	3308      	adds	r3, #8
 8001760:	623b      	str	r3, [r7, #32]
          break;
 8001762:	e01f      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	330c      	adds	r3, #12
 800176a:	623b      	str	r3, [r7, #32]
          break;
 800176c:	e01a      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d102      	bne.n	800177c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001776:	2304      	movs	r3, #4
 8001778:	623b      	str	r3, [r7, #32]
          break;
 800177a:	e013      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d105      	bne.n	8001790 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001784:	2308      	movs	r3, #8
 8001786:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69fa      	ldr	r2, [r7, #28]
 800178c:	611a      	str	r2, [r3, #16]
          break;
 800178e:	e009      	b.n	80017a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001790:	2308      	movs	r3, #8
 8001792:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	615a      	str	r2, [r3, #20]
          break;
 800179a:	e003      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
          break;
 80017a0:	e000      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          break;
 80017a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	2bff      	cmp	r3, #255	; 0xff
 80017a8:	d801      	bhi.n	80017ae <HAL_GPIO_Init+0x13a>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	e001      	b.n	80017b2 <HAL_GPIO_Init+0x13e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3304      	adds	r3, #4
 80017b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2bff      	cmp	r3, #255	; 0xff
 80017b8:	d802      	bhi.n	80017c0 <HAL_GPIO_Init+0x14c>
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	e002      	b.n	80017c6 <HAL_GPIO_Init+0x152>
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	3b08      	subs	r3, #8
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	210f      	movs	r1, #15
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	fa01 f303 	lsl.w	r3, r1, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	401a      	ands	r2, r3
 80017d8:	6a39      	ldr	r1, [r7, #32]
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	431a      	orrs	r2, r3
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 80b1 	beq.w	8001956 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017f4:	4b4d      	ldr	r3, [pc, #308]	; (800192c <HAL_GPIO_Init+0x2b8>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4a4c      	ldr	r2, [pc, #304]	; (800192c <HAL_GPIO_Init+0x2b8>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6193      	str	r3, [r2, #24]
 8001800:	4b4a      	ldr	r3, [pc, #296]	; (800192c <HAL_GPIO_Init+0x2b8>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800180c:	4a48      	ldr	r2, [pc, #288]	; (8001930 <HAL_GPIO_Init+0x2bc>)
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	089b      	lsrs	r3, r3, #2
 8001812:	3302      	adds	r3, #2
 8001814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001818:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	220f      	movs	r2, #15
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	4013      	ands	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a40      	ldr	r2, [pc, #256]	; (8001934 <HAL_GPIO_Init+0x2c0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d013      	beq.n	8001860 <HAL_GPIO_Init+0x1ec>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a3f      	ldr	r2, [pc, #252]	; (8001938 <HAL_GPIO_Init+0x2c4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d00d      	beq.n	800185c <HAL_GPIO_Init+0x1e8>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a3e      	ldr	r2, [pc, #248]	; (800193c <HAL_GPIO_Init+0x2c8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d007      	beq.n	8001858 <HAL_GPIO_Init+0x1e4>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a3d      	ldr	r2, [pc, #244]	; (8001940 <HAL_GPIO_Init+0x2cc>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d101      	bne.n	8001854 <HAL_GPIO_Init+0x1e0>
 8001850:	2303      	movs	r3, #3
 8001852:	e006      	b.n	8001862 <HAL_GPIO_Init+0x1ee>
 8001854:	2304      	movs	r3, #4
 8001856:	e004      	b.n	8001862 <HAL_GPIO_Init+0x1ee>
 8001858:	2302      	movs	r3, #2
 800185a:	e002      	b.n	8001862 <HAL_GPIO_Init+0x1ee>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <HAL_GPIO_Init+0x1ee>
 8001860:	2300      	movs	r3, #0
 8001862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001864:	f002 0203 	and.w	r2, r2, #3
 8001868:	0092      	lsls	r2, r2, #2
 800186a:	4093      	lsls	r3, r2
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001872:	492f      	ldr	r1, [pc, #188]	; (8001930 <HAL_GPIO_Init+0x2bc>)
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3302      	adds	r3, #2
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d006      	beq.n	800189a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800188c:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	492c      	ldr	r1, [pc, #176]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	4313      	orrs	r3, r2
 8001896:	600b      	str	r3, [r1, #0]
 8001898:	e006      	b.n	80018a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800189a:	4b2a      	ldr	r3, [pc, #168]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	4928      	ldr	r1, [pc, #160]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d006      	beq.n	80018c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018b4:	4b23      	ldr	r3, [pc, #140]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	4922      	ldr	r1, [pc, #136]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	604b      	str	r3, [r1, #4]
 80018c0:	e006      	b.n	80018d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018c2:	4b20      	ldr	r3, [pc, #128]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	491e      	ldr	r1, [pc, #120]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d006      	beq.n	80018ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	4918      	ldr	r1, [pc, #96]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	608b      	str	r3, [r1, #8]
 80018e8:	e006      	b.n	80018f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018ea:	4b16      	ldr	r3, [pc, #88]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	4914      	ldr	r1, [pc, #80]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d021      	beq.n	8001948 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001904:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 8001906:	68da      	ldr	r2, [r3, #12]
 8001908:	490e      	ldr	r1, [pc, #56]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	60cb      	str	r3, [r1, #12]
 8001910:	e021      	b.n	8001956 <HAL_GPIO_Init+0x2e2>
 8001912:	bf00      	nop
 8001914:	10320000 	.word	0x10320000
 8001918:	10310000 	.word	0x10310000
 800191c:	10220000 	.word	0x10220000
 8001920:	10210000 	.word	0x10210000
 8001924:	10120000 	.word	0x10120000
 8001928:	10110000 	.word	0x10110000
 800192c:	40021000 	.word	0x40021000
 8001930:	40010000 	.word	0x40010000
 8001934:	40010800 	.word	0x40010800
 8001938:	40010c00 	.word	0x40010c00
 800193c:	40011000 	.word	0x40011000
 8001940:	40011400 	.word	0x40011400
 8001944:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_GPIO_Init+0x304>)
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	43db      	mvns	r3, r3
 8001950:	4909      	ldr	r1, [pc, #36]	; (8001978 <HAL_GPIO_Init+0x304>)
 8001952:	4013      	ands	r3, r2
 8001954:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	3301      	adds	r3, #1
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	fa22 f303 	lsr.w	r3, r2, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	f47f ae8e 	bne.w	8001688 <HAL_GPIO_Init+0x14>
  }
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	372c      	adds	r7, #44	; 0x2c
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	40010400 	.word	0x40010400

0800197c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	887b      	ldrh	r3, [r7, #2]
 800198e:	4013      	ands	r3, r2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d002      	beq.n	800199a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001994:	2301      	movs	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
 8001998:	e001      	b.n	800199e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800199a:	2300      	movs	r3, #0
 800199c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800199e:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	460b      	mov	r3, r1
 80019b4:	807b      	strh	r3, [r7, #2]
 80019b6:	4613      	mov	r3, r2
 80019b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019ba:	787b      	ldrb	r3, [r7, #1]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019c0:	887a      	ldrh	r2, [r7, #2]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019c6:	e003      	b.n	80019d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019c8:	887b      	ldrh	r3, [r7, #2]
 80019ca:	041a      	lsls	r2, r3, #16
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	611a      	str	r2, [r3, #16]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bc80      	pop	{r7}
 80019d8:	4770      	bx	lr
	...

080019dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019e8:	695a      	ldr	r2, [r3, #20]
 80019ea:	88fb      	ldrh	r3, [r7, #6]
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d006      	beq.n	8001a00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019f2:	4a05      	ldr	r2, [pc, #20]	; (8001a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 f806 	bl	8001a0c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40010400 	.word	0x40010400

08001a0c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e272      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 8087 	beq.w	8001b4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a40:	4b92      	ldr	r3, [pc, #584]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 030c 	and.w	r3, r3, #12
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d00c      	beq.n	8001a66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a4c:	4b8f      	ldr	r3, [pc, #572]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d112      	bne.n	8001a7e <HAL_RCC_OscConfig+0x5e>
 8001a58:	4b8c      	ldr	r3, [pc, #560]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a64:	d10b      	bne.n	8001a7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a66:	4b89      	ldr	r3, [pc, #548]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d06c      	beq.n	8001b4c <HAL_RCC_OscConfig+0x12c>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d168      	bne.n	8001b4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e24c      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a86:	d106      	bne.n	8001a96 <HAL_RCC_OscConfig+0x76>
 8001a88:	4b80      	ldr	r3, [pc, #512]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a7f      	ldr	r2, [pc, #508]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a92:	6013      	str	r3, [r2, #0]
 8001a94:	e02e      	b.n	8001af4 <HAL_RCC_OscConfig+0xd4>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x98>
 8001a9e:	4b7b      	ldr	r3, [pc, #492]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a7a      	ldr	r2, [pc, #488]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	4b78      	ldr	r3, [pc, #480]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a77      	ldr	r2, [pc, #476]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e01d      	b.n	8001af4 <HAL_RCC_OscConfig+0xd4>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0xbc>
 8001ac2:	4b72      	ldr	r3, [pc, #456]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a71      	ldr	r2, [pc, #452]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b6f      	ldr	r3, [pc, #444]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a6e      	ldr	r2, [pc, #440]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e00b      	b.n	8001af4 <HAL_RCC_OscConfig+0xd4>
 8001adc:	4b6b      	ldr	r3, [pc, #428]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a6a      	ldr	r2, [pc, #424]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	4b68      	ldr	r3, [pc, #416]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a67      	ldr	r2, [pc, #412]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d013      	beq.n	8001b24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7ff f852 	bl	8000ba4 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b04:	f7ff f84e 	bl	8000ba4 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b64      	cmp	r3, #100	; 0x64
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e200      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b16:	4b5d      	ldr	r3, [pc, #372]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0xe4>
 8001b22:	e014      	b.n	8001b4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7ff f83e 	bl	8000ba4 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b2c:	f7ff f83a 	bl	8000ba4 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	; 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e1ec      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3e:	4b53      	ldr	r3, [pc, #332]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x10c>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d063      	beq.n	8001c22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b5a:	4b4c      	ldr	r3, [pc, #304]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00b      	beq.n	8001b7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b66:	4b49      	ldr	r3, [pc, #292]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d11c      	bne.n	8001bac <HAL_RCC_OscConfig+0x18c>
 8001b72:	4b46      	ldr	r3, [pc, #280]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d116      	bne.n	8001bac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7e:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d005      	beq.n	8001b96 <HAL_RCC_OscConfig+0x176>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d001      	beq.n	8001b96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e1c0      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b96:	4b3d      	ldr	r3, [pc, #244]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4939      	ldr	r1, [pc, #228]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001baa:	e03a      	b.n	8001c22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d020      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bb4:	4b36      	ldr	r3, [pc, #216]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bba:	f7fe fff3 	bl	8000ba4 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc2:	f7fe ffef 	bl	8000ba4 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e1a1      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd4:	4b2d      	ldr	r3, [pc, #180]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0f0      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be0:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	4927      	ldr	r1, [pc, #156]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]
 8001bf4:	e015      	b.n	8001c22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf6:	4b26      	ldr	r3, [pc, #152]	; (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7fe ffd2 	bl	8000ba4 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c04:	f7fe ffce 	bl	8000ba4 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e180      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c16:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d03a      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d019      	beq.n	8001c6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3c:	f7fe ffb2 	bl	8000ba4 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c44:	f7fe ffae 	bl	8000ba4 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e160      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c56:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <HAL_RCC_OscConfig+0x26c>)
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c62:	2001      	movs	r0, #1
 8001c64:	f000 fad8 	bl	8002218 <RCC_Delay>
 8001c68:	e01c      	b.n	8001ca4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c70:	f7fe ff98 	bl	8000ba4 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c76:	e00f      	b.n	8001c98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c78:	f7fe ff94 	bl	8000ba4 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d908      	bls.n	8001c98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e146      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
 8001c8a:	bf00      	nop
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	42420000 	.word	0x42420000
 8001c94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c98:	4b92      	ldr	r3, [pc, #584]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1e9      	bne.n	8001c78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 80a6 	beq.w	8001dfe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb6:	4b8b      	ldr	r3, [pc, #556]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10d      	bne.n	8001cde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	4b88      	ldr	r3, [pc, #544]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	4a87      	ldr	r2, [pc, #540]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	61d3      	str	r3, [r2, #28]
 8001cce:	4b85      	ldr	r3, [pc, #532]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cde:	4b82      	ldr	r3, [pc, #520]	; (8001ee8 <HAL_RCC_OscConfig+0x4c8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d118      	bne.n	8001d1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cea:	4b7f      	ldr	r3, [pc, #508]	; (8001ee8 <HAL_RCC_OscConfig+0x4c8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a7e      	ldr	r2, [pc, #504]	; (8001ee8 <HAL_RCC_OscConfig+0x4c8>)
 8001cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf6:	f7fe ff55 	bl	8000ba4 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfe:	f7fe ff51 	bl	8000ba4 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b64      	cmp	r3, #100	; 0x64
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e103      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d10:	4b75      	ldr	r3, [pc, #468]	; (8001ee8 <HAL_RCC_OscConfig+0x4c8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d106      	bne.n	8001d32 <HAL_RCC_OscConfig+0x312>
 8001d24:	4b6f      	ldr	r3, [pc, #444]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	4a6e      	ldr	r2, [pc, #440]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	6213      	str	r3, [r2, #32]
 8001d30:	e02d      	b.n	8001d8e <HAL_RCC_OscConfig+0x36e>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10c      	bne.n	8001d54 <HAL_RCC_OscConfig+0x334>
 8001d3a:	4b6a      	ldr	r3, [pc, #424]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	4a69      	ldr	r2, [pc, #420]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d40:	f023 0301 	bic.w	r3, r3, #1
 8001d44:	6213      	str	r3, [r2, #32]
 8001d46:	4b67      	ldr	r3, [pc, #412]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	4a66      	ldr	r2, [pc, #408]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	f023 0304 	bic.w	r3, r3, #4
 8001d50:	6213      	str	r3, [r2, #32]
 8001d52:	e01c      	b.n	8001d8e <HAL_RCC_OscConfig+0x36e>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	2b05      	cmp	r3, #5
 8001d5a:	d10c      	bne.n	8001d76 <HAL_RCC_OscConfig+0x356>
 8001d5c:	4b61      	ldr	r3, [pc, #388]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	4a60      	ldr	r2, [pc, #384]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d62:	f043 0304 	orr.w	r3, r3, #4
 8001d66:	6213      	str	r3, [r2, #32]
 8001d68:	4b5e      	ldr	r3, [pc, #376]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4a5d      	ldr	r2, [pc, #372]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6213      	str	r3, [r2, #32]
 8001d74:	e00b      	b.n	8001d8e <HAL_RCC_OscConfig+0x36e>
 8001d76:	4b5b      	ldr	r3, [pc, #364]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	4a5a      	ldr	r2, [pc, #360]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d7c:	f023 0301 	bic.w	r3, r3, #1
 8001d80:	6213      	str	r3, [r2, #32]
 8001d82:	4b58      	ldr	r3, [pc, #352]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	4a57      	ldr	r2, [pc, #348]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	f023 0304 	bic.w	r3, r3, #4
 8001d8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d015      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d96:	f7fe ff05 	bl	8000ba4 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9c:	e00a      	b.n	8001db4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9e:	f7fe ff01 	bl	8000ba4 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e0b1      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db4:	4b4b      	ldr	r3, [pc, #300]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0ee      	beq.n	8001d9e <HAL_RCC_OscConfig+0x37e>
 8001dc0:	e014      	b.n	8001dec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc2:	f7fe feef 	bl	8000ba4 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc8:	e00a      	b.n	8001de0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dca:	f7fe feeb 	bl	8000ba4 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e09b      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de0:	4b40      	ldr	r3, [pc, #256]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1ee      	bne.n	8001dca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dec:	7dfb      	ldrb	r3, [r7, #23]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d105      	bne.n	8001dfe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df2:	4b3c      	ldr	r3, [pc, #240]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	4a3b      	ldr	r2, [pc, #236]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 8087 	beq.w	8001f16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e08:	4b36      	ldr	r3, [pc, #216]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 030c 	and.w	r3, r3, #12
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d061      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d146      	bne.n	8001eaa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1c:	4b33      	ldr	r3, [pc, #204]	; (8001eec <HAL_RCC_OscConfig+0x4cc>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e22:	f7fe febf 	bl	8000ba4 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2a:	f7fe febb 	bl	8000ba4 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e06d      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3c:	4b29      	ldr	r3, [pc, #164]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f0      	bne.n	8001e2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e50:	d108      	bne.n	8001e64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e52:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	4921      	ldr	r1, [pc, #132]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e64:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a19      	ldr	r1, [r3, #32]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	430b      	orrs	r3, r1
 8001e76:	491b      	ldr	r1, [pc, #108]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	; (8001eec <HAL_RCC_OscConfig+0x4cc>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e82:	f7fe fe8f 	bl	8000ba4 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8a:	f7fe fe8b 	bl	8000ba4 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e03d      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0x46a>
 8001ea8:	e035      	b.n	8001f16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <HAL_RCC_OscConfig+0x4cc>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7fe fe78 	bl	8000ba4 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb8:	f7fe fe74 	bl	8000ba4 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e026      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eca:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x498>
 8001ed6:	e01e      	b.n	8001f16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d107      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e019      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40007000 	.word	0x40007000
 8001eec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <HAL_RCC_OscConfig+0x500>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d106      	bne.n	8001f12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d001      	beq.n	8001f16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40021000 	.word	0x40021000

08001f24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0d0      	b.n	80020da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f38:	4b6a      	ldr	r3, [pc, #424]	; (80020e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d910      	bls.n	8001f68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f46:	4b67      	ldr	r3, [pc, #412]	; (80020e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 0207 	bic.w	r2, r3, #7
 8001f4e:	4965      	ldr	r1, [pc, #404]	; (80020e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f56:	4b63      	ldr	r3, [pc, #396]	; (80020e4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d001      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0b8      	b.n	80020da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d020      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f80:	4b59      	ldr	r3, [pc, #356]	; (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4a58      	ldr	r2, [pc, #352]	; (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d005      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f98:	4b53      	ldr	r3, [pc, #332]	; (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	4a52      	ldr	r2, [pc, #328]	; (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fa2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa4:	4b50      	ldr	r3, [pc, #320]	; (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	494d      	ldr	r1, [pc, #308]	; (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d040      	beq.n	8002044 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d107      	bne.n	8001fda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fca:	4b47      	ldr	r3, [pc, #284]	; (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d115      	bne.n	8002002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e07f      	b.n	80020da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d107      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe2:	4b41      	ldr	r3, [pc, #260]	; (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d109      	bne.n	8002002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e073      	b.n	80020da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff2:	4b3d      	ldr	r3, [pc, #244]	; (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e06b      	b.n	80020da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002002:	4b39      	ldr	r3, [pc, #228]	; (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f023 0203 	bic.w	r2, r3, #3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	4936      	ldr	r1, [pc, #216]	; (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	4313      	orrs	r3, r2
 8002012:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002014:	f7fe fdc6 	bl	8000ba4 <HAL_GetTick>
 8002018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201a:	e00a      	b.n	8002032 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800201c:	f7fe fdc2 	bl	8000ba4 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	f241 3288 	movw	r2, #5000	; 0x1388
 800202a:	4293      	cmp	r3, r2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e053      	b.n	80020da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002032:	4b2d      	ldr	r3, [pc, #180]	; (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 020c 	and.w	r2, r3, #12
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	429a      	cmp	r2, r3
 8002042:	d1eb      	bne.n	800201c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002044:	4b27      	ldr	r3, [pc, #156]	; (80020e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d210      	bcs.n	8002074 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002052:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 0207 	bic.w	r2, r3, #7
 800205a:	4922      	ldr	r1, [pc, #136]	; (80020e4 <HAL_RCC_ClockConfig+0x1c0>)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	4313      	orrs	r3, r2
 8002060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d001      	beq.n	8002074 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e032      	b.n	80020da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002080:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	4916      	ldr	r1, [pc, #88]	; (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	4313      	orrs	r3, r2
 8002090:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	d009      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800209e:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	490e      	ldr	r1, [pc, #56]	; (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020b2:	f000 f821 	bl	80020f8 <HAL_RCC_GetSysClockFreq>
 80020b6:	4602      	mov	r2, r0
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	490a      	ldr	r1, [pc, #40]	; (80020ec <HAL_RCC_ClockConfig+0x1c8>)
 80020c4:	5ccb      	ldrb	r3, [r1, r3]
 80020c6:	fa22 f303 	lsr.w	r3, r2, r3
 80020ca:	4a09      	ldr	r2, [pc, #36]	; (80020f0 <HAL_RCC_ClockConfig+0x1cc>)
 80020cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <HAL_RCC_ClockConfig+0x1d0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fd24 	bl	8000b20 <HAL_InitTick>

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40022000 	.word	0x40022000
 80020e8:	40021000 	.word	0x40021000
 80020ec:	08003f20 	.word	0x08003f20
 80020f0:	20000000 	.word	0x20000000
 80020f4:	20000004 	.word	0x20000004

080020f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f8:	b490      	push	{r4, r7}
 80020fa:	b08a      	sub	sp, #40	; 0x28
 80020fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020fe:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002100:	1d3c      	adds	r4, r7, #4
 8002102:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002104:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002108:	f240 2301 	movw	r3, #513	; 0x201
 800210c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
 8002112:	2300      	movs	r3, #0
 8002114:	61bb      	str	r3, [r7, #24]
 8002116:	2300      	movs	r3, #0
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002122:	4b21      	ldr	r3, [pc, #132]	; (80021a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	2b04      	cmp	r3, #4
 8002130:	d002      	beq.n	8002138 <HAL_RCC_GetSysClockFreq+0x40>
 8002132:	2b08      	cmp	r3, #8
 8002134:	d003      	beq.n	800213e <HAL_RCC_GetSysClockFreq+0x46>
 8002136:	e02b      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002138:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800213a:	623b      	str	r3, [r7, #32]
      break;
 800213c:	e02b      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	0c9b      	lsrs	r3, r3, #18
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	3328      	adds	r3, #40	; 0x28
 8002148:	443b      	add	r3, r7
 800214a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800214e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d012      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800215a:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	0c5b      	lsrs	r3, r3, #17
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	3328      	adds	r3, #40	; 0x28
 8002166:	443b      	add	r3, r7
 8002168:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800216c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	4a0e      	ldr	r2, [pc, #56]	; (80021ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8002172:	fb03 f202 	mul.w	r2, r3, r2
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	fbb2 f3f3 	udiv	r3, r2, r3
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
 800217e:	e004      	b.n	800218a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	4a0b      	ldr	r2, [pc, #44]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002184:	fb02 f303 	mul.w	r3, r2, r3
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	623b      	str	r3, [r7, #32]
      break;
 800218e:	e002      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8002192:	623b      	str	r3, [r7, #32]
      break;
 8002194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002196:	6a3b      	ldr	r3, [r7, #32]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3728      	adds	r7, #40	; 0x28
 800219c:	46bd      	mov	sp, r7
 800219e:	bc90      	pop	{r4, r7}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	08003f00 	.word	0x08003f00
 80021a8:	40021000 	.word	0x40021000
 80021ac:	007a1200 	.word	0x007a1200
 80021b0:	003d0900 	.word	0x003d0900

080021b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021b8:	4b02      	ldr	r3, [pc, #8]	; (80021c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80021ba:	681b      	ldr	r3, [r3, #0]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr
 80021c4:	20000000 	.word	0x20000000

080021c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021cc:	f7ff fff2 	bl	80021b4 <HAL_RCC_GetHCLKFreq>
 80021d0:	4602      	mov	r2, r0
 80021d2:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	0a1b      	lsrs	r3, r3, #8
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	4903      	ldr	r1, [pc, #12]	; (80021ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80021de:	5ccb      	ldrb	r3, [r1, r3]
 80021e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40021000 	.word	0x40021000
 80021ec:	08003f30 	.word	0x08003f30

080021f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021f4:	f7ff ffde 	bl	80021b4 <HAL_RCC_GetHCLKFreq>
 80021f8:	4602      	mov	r2, r0
 80021fa:	4b05      	ldr	r3, [pc, #20]	; (8002210 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	0adb      	lsrs	r3, r3, #11
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	4903      	ldr	r1, [pc, #12]	; (8002214 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002206:	5ccb      	ldrb	r3, [r1, r3]
 8002208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800220c:	4618      	mov	r0, r3
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40021000 	.word	0x40021000
 8002214:	08003f30 	.word	0x08003f30

08002218 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002220:	4b0a      	ldr	r3, [pc, #40]	; (800224c <RCC_Delay+0x34>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <RCC_Delay+0x38>)
 8002226:	fba2 2303 	umull	r2, r3, r2, r3
 800222a:	0a5b      	lsrs	r3, r3, #9
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	fb02 f303 	mul.w	r3, r2, r3
 8002232:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002234:	bf00      	nop
  }
  while (Delay --);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	1e5a      	subs	r2, r3, #1
 800223a:	60fa      	str	r2, [r7, #12]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1f9      	bne.n	8002234 <RCC_Delay+0x1c>
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr
 800224c:	20000000 	.word	0x20000000
 8002250:	10624dd3 	.word	0x10624dd3

08002254 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	2300      	movs	r3, #0
 8002262:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	d07d      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002270:	2300      	movs	r3, #0
 8002272:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002274:	4b4f      	ldr	r3, [pc, #316]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10d      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002280:	4b4c      	ldr	r3, [pc, #304]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	4a4b      	ldr	r2, [pc, #300]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228a:	61d3      	str	r3, [r2, #28]
 800228c:	4b49      	ldr	r3, [pc, #292]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002298:	2301      	movs	r3, #1
 800229a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229c:	4b46      	ldr	r3, [pc, #280]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d118      	bne.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022a8:	4b43      	ldr	r3, [pc, #268]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a42      	ldr	r2, [pc, #264]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b4:	f7fe fc76 	bl	8000ba4 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ba:	e008      	b.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022bc:	f7fe fc72 	bl	8000ba4 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b64      	cmp	r3, #100	; 0x64
 80022c8:	d901      	bls.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e06d      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ce:	4b3a      	ldr	r3, [pc, #232]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f0      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022da:	4b36      	ldr	r3, [pc, #216]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022e2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d02e      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d027      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022f8:	4b2e      	ldr	r3, [pc, #184]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002300:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002302:	4b2e      	ldr	r3, [pc, #184]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002304:	2201      	movs	r2, #1
 8002306:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002308:	4b2c      	ldr	r3, [pc, #176]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800230e:	4a29      	ldr	r2, [pc, #164]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d014      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7fe fc41 	bl	8000ba4 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002324:	e00a      	b.n	800233c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002326:	f7fe fc3d 	bl	8000ba4 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	f241 3288 	movw	r2, #5000	; 0x1388
 8002334:	4293      	cmp	r3, r2
 8002336:	d901      	bls.n	800233c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e036      	b.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233c:	4b1d      	ldr	r3, [pc, #116]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0ee      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002348:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	4917      	ldr	r1, [pc, #92]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002356:	4313      	orrs	r3, r2
 8002358:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800235a:	7dfb      	ldrb	r3, [r7, #23]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d105      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002360:	4b14      	ldr	r3, [pc, #80]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	4a13      	ldr	r2, [pc, #76]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800236a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002378:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	490b      	ldr	r1, [pc, #44]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002386:	4313      	orrs	r3, r2
 8002388:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0310 	and.w	r3, r3, #16
 8002392:	2b00      	cmp	r3, #0
 8002394:	d008      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002396:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	4904      	ldr	r1, [pc, #16]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40007000 	.word	0x40007000
 80023bc:	42420440 	.word	0x42420440

080023c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b08d      	sub	sp, #52	; 0x34
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023c8:	4b58      	ldr	r3, [pc, #352]	; (800252c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80023ca:	f107 040c 	add.w	r4, r7, #12
 80023ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023d4:	f240 2301 	movw	r3, #513	; 0x201
 80023d8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80023da:	2300      	movs	r3, #0
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
 80023de:	2300      	movs	r3, #0
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023e2:	2300      	movs	r3, #0
 80023e4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
 80023ea:	2300      	movs	r3, #0
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b10      	cmp	r3, #16
 80023f2:	d00a      	beq.n	800240a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b10      	cmp	r3, #16
 80023f8:	f200 808e 	bhi.w	8002518 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d049      	beq.n	8002496 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d079      	beq.n	80024fc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002408:	e086      	b.n	8002518 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800240a:	4b49      	ldr	r3, [pc, #292]	; (8002530 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002410:	4b47      	ldr	r3, [pc, #284]	; (8002530 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d07f      	beq.n	800251c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	0c9b      	lsrs	r3, r3, #18
 8002420:	f003 030f 	and.w	r3, r3, #15
 8002424:	3330      	adds	r3, #48	; 0x30
 8002426:	443b      	add	r3, r7
 8002428:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800242c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d017      	beq.n	8002468 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002438:	4b3d      	ldr	r3, [pc, #244]	; (8002530 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	0c5b      	lsrs	r3, r3, #17
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	3330      	adds	r3, #48	; 0x30
 8002444:	443b      	add	r3, r7
 8002446:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00d      	beq.n	8002472 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002456:	4a37      	ldr	r2, [pc, #220]	; (8002534 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	fbb2 f2f3 	udiv	r2, r2, r3
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	fb02 f303 	mul.w	r3, r2, r3
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002466:	e004      	b.n	8002472 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	4a33      	ldr	r2, [pc, #204]	; (8002538 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800246c:	fb02 f303 	mul.w	r3, r2, r3
 8002470:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002472:	4b2f      	ldr	r3, [pc, #188]	; (8002530 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800247e:	d102      	bne.n	8002486 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002482:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002484:	e04a      	b.n	800251c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8002486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	4a2c      	ldr	r2, [pc, #176]	; (800253c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800248c:	fba2 2303 	umull	r2, r3, r2, r3
 8002490:	085b      	lsrs	r3, r3, #1
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002494:	e042      	b.n	800251c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8002496:	4b26      	ldr	r3, [pc, #152]	; (8002530 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024a6:	d108      	bne.n	80024ba <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80024b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80024b8:	e01f      	b.n	80024fa <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024c4:	d109      	bne.n	80024da <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80024c6:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80024d2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80024d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80024d8:	e00f      	b.n	80024fa <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024e4:	d11c      	bne.n	8002520 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80024e6:	4b12      	ldr	r3, [pc, #72]	; (8002530 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d016      	beq.n	8002520 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80024f2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80024f6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80024f8:	e012      	b.n	8002520 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80024fa:	e011      	b.n	8002520 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80024fc:	f7ff fe78 	bl	80021f0 <HAL_RCC_GetPCLK2Freq>
 8002500:	4602      	mov	r2, r0
 8002502:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	0b9b      	lsrs	r3, r3, #14
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	3301      	adds	r3, #1
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	fbb2 f3f3 	udiv	r3, r2, r3
 8002514:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002516:	e004      	b.n	8002522 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002518:	bf00      	nop
 800251a:	e002      	b.n	8002522 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800251c:	bf00      	nop
 800251e:	e000      	b.n	8002522 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002520:	bf00      	nop
    }
  }
  return (frequency);
 8002522:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002524:	4618      	mov	r0, r3
 8002526:	3734      	adds	r7, #52	; 0x34
 8002528:	46bd      	mov	sp, r7
 800252a:	bd90      	pop	{r4, r7, pc}
 800252c:	08003f10 	.word	0x08003f10
 8002530:	40021000 	.word	0x40021000
 8002534:	007a1200 	.word	0x007a1200
 8002538:	003d0900 	.word	0x003d0900
 800253c:	aaaaaaab 	.word	0xaaaaaaab

08002540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e041      	b.n	80025d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7fe f96e 	bl	8000848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3304      	adds	r3, #4
 800257c:	4619      	mov	r1, r3
 800257e:	4610      	mov	r0, r2
 8002580:	f000 f93c 	bl	80027fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d001      	beq.n	80025f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e032      	b.n	800265e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2202      	movs	r2, #2
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a18      	ldr	r2, [pc, #96]	; (8002668 <HAL_TIM_Base_Start+0x88>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d00e      	beq.n	8002628 <HAL_TIM_Base_Start+0x48>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002612:	d009      	beq.n	8002628 <HAL_TIM_Base_Start+0x48>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a14      	ldr	r2, [pc, #80]	; (800266c <HAL_TIM_Base_Start+0x8c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d004      	beq.n	8002628 <HAL_TIM_Base_Start+0x48>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a13      	ldr	r2, [pc, #76]	; (8002670 <HAL_TIM_Base_Start+0x90>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d111      	bne.n	800264c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b06      	cmp	r3, #6
 8002638:	d010      	beq.n	800265c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f042 0201 	orr.w	r2, r2, #1
 8002648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800264a:	e007      	b.n	800265c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0201 	orr.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr
 8002668:	40012c00 	.word	0x40012c00
 800266c:	40000400 	.word	0x40000400
 8002670:	40000800 	.word	0x40000800

08002674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_TIM_ConfigClockSource+0x18>
 8002688:	2302      	movs	r3, #2
 800268a:	e0b3      	b.n	80027f4 <HAL_TIM_ConfigClockSource+0x180>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026c4:	d03e      	beq.n	8002744 <HAL_TIM_ConfigClockSource+0xd0>
 80026c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ca:	f200 8087 	bhi.w	80027dc <HAL_TIM_ConfigClockSource+0x168>
 80026ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d2:	f000 8085 	beq.w	80027e0 <HAL_TIM_ConfigClockSource+0x16c>
 80026d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026da:	d87f      	bhi.n	80027dc <HAL_TIM_ConfigClockSource+0x168>
 80026dc:	2b70      	cmp	r3, #112	; 0x70
 80026de:	d01a      	beq.n	8002716 <HAL_TIM_ConfigClockSource+0xa2>
 80026e0:	2b70      	cmp	r3, #112	; 0x70
 80026e2:	d87b      	bhi.n	80027dc <HAL_TIM_ConfigClockSource+0x168>
 80026e4:	2b60      	cmp	r3, #96	; 0x60
 80026e6:	d050      	beq.n	800278a <HAL_TIM_ConfigClockSource+0x116>
 80026e8:	2b60      	cmp	r3, #96	; 0x60
 80026ea:	d877      	bhi.n	80027dc <HAL_TIM_ConfigClockSource+0x168>
 80026ec:	2b50      	cmp	r3, #80	; 0x50
 80026ee:	d03c      	beq.n	800276a <HAL_TIM_ConfigClockSource+0xf6>
 80026f0:	2b50      	cmp	r3, #80	; 0x50
 80026f2:	d873      	bhi.n	80027dc <HAL_TIM_ConfigClockSource+0x168>
 80026f4:	2b40      	cmp	r3, #64	; 0x40
 80026f6:	d058      	beq.n	80027aa <HAL_TIM_ConfigClockSource+0x136>
 80026f8:	2b40      	cmp	r3, #64	; 0x40
 80026fa:	d86f      	bhi.n	80027dc <HAL_TIM_ConfigClockSource+0x168>
 80026fc:	2b30      	cmp	r3, #48	; 0x30
 80026fe:	d064      	beq.n	80027ca <HAL_TIM_ConfigClockSource+0x156>
 8002700:	2b30      	cmp	r3, #48	; 0x30
 8002702:	d86b      	bhi.n	80027dc <HAL_TIM_ConfigClockSource+0x168>
 8002704:	2b20      	cmp	r3, #32
 8002706:	d060      	beq.n	80027ca <HAL_TIM_ConfigClockSource+0x156>
 8002708:	2b20      	cmp	r3, #32
 800270a:	d867      	bhi.n	80027dc <HAL_TIM_ConfigClockSource+0x168>
 800270c:	2b00      	cmp	r3, #0
 800270e:	d05c      	beq.n	80027ca <HAL_TIM_ConfigClockSource+0x156>
 8002710:	2b10      	cmp	r3, #16
 8002712:	d05a      	beq.n	80027ca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002714:	e062      	b.n	80027dc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	6899      	ldr	r1, [r3, #8]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f000 f942 	bl	80029ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002738:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	609a      	str	r2, [r3, #8]
      break;
 8002742:	e04e      	b.n	80027e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	6899      	ldr	r1, [r3, #8]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f000 f92b 	bl	80029ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002766:	609a      	str	r2, [r3, #8]
      break;
 8002768:	e03b      	b.n	80027e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6818      	ldr	r0, [r3, #0]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	6859      	ldr	r1, [r3, #4]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	461a      	mov	r2, r3
 8002778:	f000 f8a2 	bl	80028c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2150      	movs	r1, #80	; 0x50
 8002782:	4618      	mov	r0, r3
 8002784:	f000 f8f9 	bl	800297a <TIM_ITRx_SetConfig>
      break;
 8002788:	e02b      	b.n	80027e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	6859      	ldr	r1, [r3, #4]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	461a      	mov	r2, r3
 8002798:	f000 f8c0 	bl	800291c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2160      	movs	r1, #96	; 0x60
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 f8e9 	bl	800297a <TIM_ITRx_SetConfig>
      break;
 80027a8:	e01b      	b.n	80027e2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	6859      	ldr	r1, [r3, #4]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	461a      	mov	r2, r3
 80027b8:	f000 f882 	bl	80028c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2140      	movs	r1, #64	; 0x40
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 f8d9 	bl	800297a <TIM_ITRx_SetConfig>
      break;
 80027c8:	e00b      	b.n	80027e2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4619      	mov	r1, r3
 80027d4:	4610      	mov	r0, r2
 80027d6:	f000 f8d0 	bl	800297a <TIM_ITRx_SetConfig>
        break;
 80027da:	e002      	b.n	80027e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80027dc:	bf00      	nop
 80027de:	e000      	b.n	80027e2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80027e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a29      	ldr	r2, [pc, #164]	; (80028b4 <TIM_Base_SetConfig+0xb8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d00b      	beq.n	800282c <TIM_Base_SetConfig+0x30>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281a:	d007      	beq.n	800282c <TIM_Base_SetConfig+0x30>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a26      	ldr	r2, [pc, #152]	; (80028b8 <TIM_Base_SetConfig+0xbc>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d003      	beq.n	800282c <TIM_Base_SetConfig+0x30>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a25      	ldr	r2, [pc, #148]	; (80028bc <TIM_Base_SetConfig+0xc0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d108      	bne.n	800283e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a1c      	ldr	r2, [pc, #112]	; (80028b4 <TIM_Base_SetConfig+0xb8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00b      	beq.n	800285e <TIM_Base_SetConfig+0x62>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284c:	d007      	beq.n	800285e <TIM_Base_SetConfig+0x62>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a19      	ldr	r2, [pc, #100]	; (80028b8 <TIM_Base_SetConfig+0xbc>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d003      	beq.n	800285e <TIM_Base_SetConfig+0x62>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a18      	ldr	r2, [pc, #96]	; (80028bc <TIM_Base_SetConfig+0xc0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d108      	bne.n	8002870 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4313      	orrs	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	4313      	orrs	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a07      	ldr	r2, [pc, #28]	; (80028b4 <TIM_Base_SetConfig+0xb8>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d103      	bne.n	80028a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	615a      	str	r2, [r3, #20]
}
 80028aa:	bf00      	nop
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	40012c00 	.word	0x40012c00
 80028b8:	40000400 	.word	0x40000400
 80028bc:	40000800 	.word	0x40000800

080028c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	f023 0201 	bic.w	r2, r3, #1
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f023 030a 	bic.w	r3, r3, #10
 80028fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	4313      	orrs	r3, r2
 8002904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	621a      	str	r2, [r3, #32]
}
 8002912:	bf00      	nop
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	f023 0210 	bic.w	r2, r3, #16
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002946:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	031b      	lsls	r3, r3, #12
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002958:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	621a      	str	r2, [r3, #32]
}
 8002970:	bf00      	nop
 8002972:	371c      	adds	r7, #28
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800297a:	b480      	push	{r7}
 800297c:	b085      	sub	sp, #20
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002990:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4313      	orrs	r3, r2
 8002998:	f043 0307 	orr.w	r3, r3, #7
 800299c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	609a      	str	r2, [r3, #8]
}
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b087      	sub	sp, #28
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	60f8      	str	r0, [r7, #12]
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
 80029ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	021a      	lsls	r2, r3, #8
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	431a      	orrs	r2, r3
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	609a      	str	r2, [r3, #8]
}
 80029e2:	bf00      	nop
 80029e4:	371c      	adds	r7, #28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e046      	b.n	8002a92 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a16      	ldr	r2, [pc, #88]	; (8002a9c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d00e      	beq.n	8002a66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a50:	d009      	beq.n	8002a66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a12      	ldr	r2, [pc, #72]	; (8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d004      	beq.n	8002a66 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a10      	ldr	r2, [pc, #64]	; (8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d10c      	bne.n	8002a80 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	40012c00 	.word	0x40012c00
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40000800 	.word	0x40000800

08002aa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e03f      	b.n	8002b3a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fd fed8 	bl	8000884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2224      	movs	r2, #36	; 0x24
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f905 	bl	8002cfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695a      	ldr	r2, [r3, #20]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b08a      	sub	sp, #40	; 0x28
 8002b46:	af02      	add	r7, sp, #8
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	603b      	str	r3, [r7, #0]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	d17c      	bne.n	8002c5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d002      	beq.n	8002b6e <HAL_UART_Transmit+0x2c>
 8002b68:	88fb      	ldrh	r3, [r7, #6]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e075      	b.n	8002c5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_UART_Transmit+0x3e>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e06e      	b.n	8002c5e <HAL_UART_Transmit+0x11c>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2221      	movs	r2, #33	; 0x21
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b96:	f7fe f805 	bl	8000ba4 <HAL_GetTick>
 8002b9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	88fa      	ldrh	r2, [r7, #6]
 8002ba0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	88fa      	ldrh	r2, [r7, #6]
 8002ba6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb0:	d108      	bne.n	8002bc4 <HAL_UART_Transmit+0x82>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d104      	bne.n	8002bc4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	61bb      	str	r3, [r7, #24]
 8002bc2:	e003      	b.n	8002bcc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002bd4:	e02a      	b.n	8002c2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2180      	movs	r1, #128	; 0x80
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 f840 	bl	8002c66 <UART_WaitOnFlagUntilTimeout>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e036      	b.n	8002c5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10b      	bne.n	8002c0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	3302      	adds	r3, #2
 8002c0a:	61bb      	str	r3, [r7, #24]
 8002c0c:	e007      	b.n	8002c1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	781a      	ldrb	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1cf      	bne.n	8002bd6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2140      	movs	r1, #64	; 0x40
 8002c40:	68f8      	ldr	r0, [r7, #12]
 8002c42:	f000 f810 	bl	8002c66 <UART_WaitOnFlagUntilTimeout>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e006      	b.n	8002c5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	e000      	b.n	8002c5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c5c:	2302      	movs	r3, #2
  }
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3720      	adds	r7, #32
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	60f8      	str	r0, [r7, #12]
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	603b      	str	r3, [r7, #0]
 8002c72:	4613      	mov	r3, r2
 8002c74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c76:	e02c      	b.n	8002cd2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7e:	d028      	beq.n	8002cd2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d007      	beq.n	8002c96 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c86:	f7fd ff8d 	bl	8000ba4 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d21d      	bcs.n	8002cd2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002ca4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0201 	bic.w	r2, r2, #1
 8002cb4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e00f      	b.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	bf0c      	ite	eq
 8002ce2:	2301      	moveq	r3, #1
 8002ce4:	2300      	movne	r3, #0
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d0c3      	beq.n	8002c78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68da      	ldr	r2, [r3, #12]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d36:	f023 030c 	bic.w	r3, r3, #12
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	68b9      	ldr	r1, [r7, #8]
 8002d40:	430b      	orrs	r3, r1
 8002d42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	699a      	ldr	r2, [r3, #24]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a2c      	ldr	r2, [pc, #176]	; (8002e10 <UART_SetConfig+0x114>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d103      	bne.n	8002d6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d64:	f7ff fa44 	bl	80021f0 <HAL_RCC_GetPCLK2Freq>
 8002d68:	60f8      	str	r0, [r7, #12]
 8002d6a:	e002      	b.n	8002d72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d6c:	f7ff fa2c 	bl	80021c8 <HAL_RCC_GetPCLK1Freq>
 8002d70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	009a      	lsls	r2, r3, #2
 8002d7c:	441a      	add	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d88:	4a22      	ldr	r2, [pc, #136]	; (8002e14 <UART_SetConfig+0x118>)
 8002d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	0119      	lsls	r1, r3, #4
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	009a      	lsls	r2, r3, #2
 8002d9c:	441a      	add	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002da8:	4b1a      	ldr	r3, [pc, #104]	; (8002e14 <UART_SetConfig+0x118>)
 8002daa:	fba3 0302 	umull	r0, r3, r3, r2
 8002dae:	095b      	lsrs	r3, r3, #5
 8002db0:	2064      	movs	r0, #100	; 0x64
 8002db2:	fb00 f303 	mul.w	r3, r0, r3
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	3332      	adds	r3, #50	; 0x32
 8002dbc:	4a15      	ldr	r2, [pc, #84]	; (8002e14 <UART_SetConfig+0x118>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	095b      	lsrs	r3, r3, #5
 8002dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dc8:	4419      	add	r1, r3
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009a      	lsls	r2, r3, #2
 8002dd4:	441a      	add	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002de0:	4b0c      	ldr	r3, [pc, #48]	; (8002e14 <UART_SetConfig+0x118>)
 8002de2:	fba3 0302 	umull	r0, r3, r3, r2
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	2064      	movs	r0, #100	; 0x64
 8002dea:	fb00 f303 	mul.w	r3, r0, r3
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	3332      	adds	r3, #50	; 0x32
 8002df4:	4a07      	ldr	r2, [pc, #28]	; (8002e14 <UART_SetConfig+0x118>)
 8002df6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	f003 020f 	and.w	r2, r3, #15
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	440a      	add	r2, r1
 8002e06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e08:	bf00      	nop
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40013800 	.word	0x40013800
 8002e14:	51eb851f 	.word	0x51eb851f

08002e18 <__errno>:
 8002e18:	4b01      	ldr	r3, [pc, #4]	; (8002e20 <__errno+0x8>)
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	2000000c 	.word	0x2000000c

08002e24 <__libc_init_array>:
 8002e24:	b570      	push	{r4, r5, r6, lr}
 8002e26:	2600      	movs	r6, #0
 8002e28:	4d0c      	ldr	r5, [pc, #48]	; (8002e5c <__libc_init_array+0x38>)
 8002e2a:	4c0d      	ldr	r4, [pc, #52]	; (8002e60 <__libc_init_array+0x3c>)
 8002e2c:	1b64      	subs	r4, r4, r5
 8002e2e:	10a4      	asrs	r4, r4, #2
 8002e30:	42a6      	cmp	r6, r4
 8002e32:	d109      	bne.n	8002e48 <__libc_init_array+0x24>
 8002e34:	f001 f82c 	bl	8003e90 <_init>
 8002e38:	2600      	movs	r6, #0
 8002e3a:	4d0a      	ldr	r5, [pc, #40]	; (8002e64 <__libc_init_array+0x40>)
 8002e3c:	4c0a      	ldr	r4, [pc, #40]	; (8002e68 <__libc_init_array+0x44>)
 8002e3e:	1b64      	subs	r4, r4, r5
 8002e40:	10a4      	asrs	r4, r4, #2
 8002e42:	42a6      	cmp	r6, r4
 8002e44:	d105      	bne.n	8002e52 <__libc_init_array+0x2e>
 8002e46:	bd70      	pop	{r4, r5, r6, pc}
 8002e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e4c:	4798      	blx	r3
 8002e4e:	3601      	adds	r6, #1
 8002e50:	e7ee      	b.n	8002e30 <__libc_init_array+0xc>
 8002e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e56:	4798      	blx	r3
 8002e58:	3601      	adds	r6, #1
 8002e5a:	e7f2      	b.n	8002e42 <__libc_init_array+0x1e>
 8002e5c:	08003fd0 	.word	0x08003fd0
 8002e60:	08003fd0 	.word	0x08003fd0
 8002e64:	08003fd0 	.word	0x08003fd0
 8002e68:	08003fd4 	.word	0x08003fd4

08002e6c <memset>:
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	4402      	add	r2, r0
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d100      	bne.n	8002e76 <memset+0xa>
 8002e74:	4770      	bx	lr
 8002e76:	f803 1b01 	strb.w	r1, [r3], #1
 8002e7a:	e7f9      	b.n	8002e70 <memset+0x4>

08002e7c <iprintf>:
 8002e7c:	b40f      	push	{r0, r1, r2, r3}
 8002e7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <iprintf+0x2c>)
 8002e80:	b513      	push	{r0, r1, r4, lr}
 8002e82:	681c      	ldr	r4, [r3, #0]
 8002e84:	b124      	cbz	r4, 8002e90 <iprintf+0x14>
 8002e86:	69a3      	ldr	r3, [r4, #24]
 8002e88:	b913      	cbnz	r3, 8002e90 <iprintf+0x14>
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f000 fa5a 	bl	8003344 <__sinit>
 8002e90:	ab05      	add	r3, sp, #20
 8002e92:	4620      	mov	r0, r4
 8002e94:	9a04      	ldr	r2, [sp, #16]
 8002e96:	68a1      	ldr	r1, [r4, #8]
 8002e98:	9301      	str	r3, [sp, #4]
 8002e9a:	f000 fc5d 	bl	8003758 <_vfiprintf_r>
 8002e9e:	b002      	add	sp, #8
 8002ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ea4:	b004      	add	sp, #16
 8002ea6:	4770      	bx	lr
 8002ea8:	2000000c 	.word	0x2000000c

08002eac <_puts_r>:
 8002eac:	b570      	push	{r4, r5, r6, lr}
 8002eae:	460e      	mov	r6, r1
 8002eb0:	4605      	mov	r5, r0
 8002eb2:	b118      	cbz	r0, 8002ebc <_puts_r+0x10>
 8002eb4:	6983      	ldr	r3, [r0, #24]
 8002eb6:	b90b      	cbnz	r3, 8002ebc <_puts_r+0x10>
 8002eb8:	f000 fa44 	bl	8003344 <__sinit>
 8002ebc:	69ab      	ldr	r3, [r5, #24]
 8002ebe:	68ac      	ldr	r4, [r5, #8]
 8002ec0:	b913      	cbnz	r3, 8002ec8 <_puts_r+0x1c>
 8002ec2:	4628      	mov	r0, r5
 8002ec4:	f000 fa3e 	bl	8003344 <__sinit>
 8002ec8:	4b2c      	ldr	r3, [pc, #176]	; (8002f7c <_puts_r+0xd0>)
 8002eca:	429c      	cmp	r4, r3
 8002ecc:	d120      	bne.n	8002f10 <_puts_r+0x64>
 8002ece:	686c      	ldr	r4, [r5, #4]
 8002ed0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ed2:	07db      	lsls	r3, r3, #31
 8002ed4:	d405      	bmi.n	8002ee2 <_puts_r+0x36>
 8002ed6:	89a3      	ldrh	r3, [r4, #12]
 8002ed8:	0598      	lsls	r0, r3, #22
 8002eda:	d402      	bmi.n	8002ee2 <_puts_r+0x36>
 8002edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ede:	f000 facf 	bl	8003480 <__retarget_lock_acquire_recursive>
 8002ee2:	89a3      	ldrh	r3, [r4, #12]
 8002ee4:	0719      	lsls	r1, r3, #28
 8002ee6:	d51d      	bpl.n	8002f24 <_puts_r+0x78>
 8002ee8:	6923      	ldr	r3, [r4, #16]
 8002eea:	b1db      	cbz	r3, 8002f24 <_puts_r+0x78>
 8002eec:	3e01      	subs	r6, #1
 8002eee:	68a3      	ldr	r3, [r4, #8]
 8002ef0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	60a3      	str	r3, [r4, #8]
 8002ef8:	bb39      	cbnz	r1, 8002f4a <_puts_r+0x9e>
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	da38      	bge.n	8002f70 <_puts_r+0xc4>
 8002efe:	4622      	mov	r2, r4
 8002f00:	210a      	movs	r1, #10
 8002f02:	4628      	mov	r0, r5
 8002f04:	f000 f848 	bl	8002f98 <__swbuf_r>
 8002f08:	3001      	adds	r0, #1
 8002f0a:	d011      	beq.n	8002f30 <_puts_r+0x84>
 8002f0c:	250a      	movs	r5, #10
 8002f0e:	e011      	b.n	8002f34 <_puts_r+0x88>
 8002f10:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <_puts_r+0xd4>)
 8002f12:	429c      	cmp	r4, r3
 8002f14:	d101      	bne.n	8002f1a <_puts_r+0x6e>
 8002f16:	68ac      	ldr	r4, [r5, #8]
 8002f18:	e7da      	b.n	8002ed0 <_puts_r+0x24>
 8002f1a:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <_puts_r+0xd8>)
 8002f1c:	429c      	cmp	r4, r3
 8002f1e:	bf08      	it	eq
 8002f20:	68ec      	ldreq	r4, [r5, #12]
 8002f22:	e7d5      	b.n	8002ed0 <_puts_r+0x24>
 8002f24:	4621      	mov	r1, r4
 8002f26:	4628      	mov	r0, r5
 8002f28:	f000 f888 	bl	800303c <__swsetup_r>
 8002f2c:	2800      	cmp	r0, #0
 8002f2e:	d0dd      	beq.n	8002eec <_puts_r+0x40>
 8002f30:	f04f 35ff 	mov.w	r5, #4294967295
 8002f34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f36:	07da      	lsls	r2, r3, #31
 8002f38:	d405      	bmi.n	8002f46 <_puts_r+0x9a>
 8002f3a:	89a3      	ldrh	r3, [r4, #12]
 8002f3c:	059b      	lsls	r3, r3, #22
 8002f3e:	d402      	bmi.n	8002f46 <_puts_r+0x9a>
 8002f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f42:	f000 fa9e 	bl	8003482 <__retarget_lock_release_recursive>
 8002f46:	4628      	mov	r0, r5
 8002f48:	bd70      	pop	{r4, r5, r6, pc}
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	da04      	bge.n	8002f58 <_puts_r+0xac>
 8002f4e:	69a2      	ldr	r2, [r4, #24]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	dc06      	bgt.n	8002f62 <_puts_r+0xb6>
 8002f54:	290a      	cmp	r1, #10
 8002f56:	d004      	beq.n	8002f62 <_puts_r+0xb6>
 8002f58:	6823      	ldr	r3, [r4, #0]
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	6022      	str	r2, [r4, #0]
 8002f5e:	7019      	strb	r1, [r3, #0]
 8002f60:	e7c5      	b.n	8002eee <_puts_r+0x42>
 8002f62:	4622      	mov	r2, r4
 8002f64:	4628      	mov	r0, r5
 8002f66:	f000 f817 	bl	8002f98 <__swbuf_r>
 8002f6a:	3001      	adds	r0, #1
 8002f6c:	d1bf      	bne.n	8002eee <_puts_r+0x42>
 8002f6e:	e7df      	b.n	8002f30 <_puts_r+0x84>
 8002f70:	250a      	movs	r5, #10
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	6022      	str	r2, [r4, #0]
 8002f78:	701d      	strb	r5, [r3, #0]
 8002f7a:	e7db      	b.n	8002f34 <_puts_r+0x88>
 8002f7c:	08003f5c 	.word	0x08003f5c
 8002f80:	08003f7c 	.word	0x08003f7c
 8002f84:	08003f3c 	.word	0x08003f3c

08002f88 <puts>:
 8002f88:	4b02      	ldr	r3, [pc, #8]	; (8002f94 <puts+0xc>)
 8002f8a:	4601      	mov	r1, r0
 8002f8c:	6818      	ldr	r0, [r3, #0]
 8002f8e:	f7ff bf8d 	b.w	8002eac <_puts_r>
 8002f92:	bf00      	nop
 8002f94:	2000000c 	.word	0x2000000c

08002f98 <__swbuf_r>:
 8002f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9a:	460e      	mov	r6, r1
 8002f9c:	4614      	mov	r4, r2
 8002f9e:	4605      	mov	r5, r0
 8002fa0:	b118      	cbz	r0, 8002faa <__swbuf_r+0x12>
 8002fa2:	6983      	ldr	r3, [r0, #24]
 8002fa4:	b90b      	cbnz	r3, 8002faa <__swbuf_r+0x12>
 8002fa6:	f000 f9cd 	bl	8003344 <__sinit>
 8002faa:	4b21      	ldr	r3, [pc, #132]	; (8003030 <__swbuf_r+0x98>)
 8002fac:	429c      	cmp	r4, r3
 8002fae:	d12b      	bne.n	8003008 <__swbuf_r+0x70>
 8002fb0:	686c      	ldr	r4, [r5, #4]
 8002fb2:	69a3      	ldr	r3, [r4, #24]
 8002fb4:	60a3      	str	r3, [r4, #8]
 8002fb6:	89a3      	ldrh	r3, [r4, #12]
 8002fb8:	071a      	lsls	r2, r3, #28
 8002fba:	d52f      	bpl.n	800301c <__swbuf_r+0x84>
 8002fbc:	6923      	ldr	r3, [r4, #16]
 8002fbe:	b36b      	cbz	r3, 800301c <__swbuf_r+0x84>
 8002fc0:	6923      	ldr	r3, [r4, #16]
 8002fc2:	6820      	ldr	r0, [r4, #0]
 8002fc4:	b2f6      	uxtb	r6, r6
 8002fc6:	1ac0      	subs	r0, r0, r3
 8002fc8:	6963      	ldr	r3, [r4, #20]
 8002fca:	4637      	mov	r7, r6
 8002fcc:	4283      	cmp	r3, r0
 8002fce:	dc04      	bgt.n	8002fda <__swbuf_r+0x42>
 8002fd0:	4621      	mov	r1, r4
 8002fd2:	4628      	mov	r0, r5
 8002fd4:	f000 f922 	bl	800321c <_fflush_r>
 8002fd8:	bb30      	cbnz	r0, 8003028 <__swbuf_r+0x90>
 8002fda:	68a3      	ldr	r3, [r4, #8]
 8002fdc:	3001      	adds	r0, #1
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	60a3      	str	r3, [r4, #8]
 8002fe2:	6823      	ldr	r3, [r4, #0]
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	6022      	str	r2, [r4, #0]
 8002fe8:	701e      	strb	r6, [r3, #0]
 8002fea:	6963      	ldr	r3, [r4, #20]
 8002fec:	4283      	cmp	r3, r0
 8002fee:	d004      	beq.n	8002ffa <__swbuf_r+0x62>
 8002ff0:	89a3      	ldrh	r3, [r4, #12]
 8002ff2:	07db      	lsls	r3, r3, #31
 8002ff4:	d506      	bpl.n	8003004 <__swbuf_r+0x6c>
 8002ff6:	2e0a      	cmp	r6, #10
 8002ff8:	d104      	bne.n	8003004 <__swbuf_r+0x6c>
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	4628      	mov	r0, r5
 8002ffe:	f000 f90d 	bl	800321c <_fflush_r>
 8003002:	b988      	cbnz	r0, 8003028 <__swbuf_r+0x90>
 8003004:	4638      	mov	r0, r7
 8003006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003008:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <__swbuf_r+0x9c>)
 800300a:	429c      	cmp	r4, r3
 800300c:	d101      	bne.n	8003012 <__swbuf_r+0x7a>
 800300e:	68ac      	ldr	r4, [r5, #8]
 8003010:	e7cf      	b.n	8002fb2 <__swbuf_r+0x1a>
 8003012:	4b09      	ldr	r3, [pc, #36]	; (8003038 <__swbuf_r+0xa0>)
 8003014:	429c      	cmp	r4, r3
 8003016:	bf08      	it	eq
 8003018:	68ec      	ldreq	r4, [r5, #12]
 800301a:	e7ca      	b.n	8002fb2 <__swbuf_r+0x1a>
 800301c:	4621      	mov	r1, r4
 800301e:	4628      	mov	r0, r5
 8003020:	f000 f80c 	bl	800303c <__swsetup_r>
 8003024:	2800      	cmp	r0, #0
 8003026:	d0cb      	beq.n	8002fc0 <__swbuf_r+0x28>
 8003028:	f04f 37ff 	mov.w	r7, #4294967295
 800302c:	e7ea      	b.n	8003004 <__swbuf_r+0x6c>
 800302e:	bf00      	nop
 8003030:	08003f5c 	.word	0x08003f5c
 8003034:	08003f7c 	.word	0x08003f7c
 8003038:	08003f3c 	.word	0x08003f3c

0800303c <__swsetup_r>:
 800303c:	4b32      	ldr	r3, [pc, #200]	; (8003108 <__swsetup_r+0xcc>)
 800303e:	b570      	push	{r4, r5, r6, lr}
 8003040:	681d      	ldr	r5, [r3, #0]
 8003042:	4606      	mov	r6, r0
 8003044:	460c      	mov	r4, r1
 8003046:	b125      	cbz	r5, 8003052 <__swsetup_r+0x16>
 8003048:	69ab      	ldr	r3, [r5, #24]
 800304a:	b913      	cbnz	r3, 8003052 <__swsetup_r+0x16>
 800304c:	4628      	mov	r0, r5
 800304e:	f000 f979 	bl	8003344 <__sinit>
 8003052:	4b2e      	ldr	r3, [pc, #184]	; (800310c <__swsetup_r+0xd0>)
 8003054:	429c      	cmp	r4, r3
 8003056:	d10f      	bne.n	8003078 <__swsetup_r+0x3c>
 8003058:	686c      	ldr	r4, [r5, #4]
 800305a:	89a3      	ldrh	r3, [r4, #12]
 800305c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003060:	0719      	lsls	r1, r3, #28
 8003062:	d42c      	bmi.n	80030be <__swsetup_r+0x82>
 8003064:	06dd      	lsls	r5, r3, #27
 8003066:	d411      	bmi.n	800308c <__swsetup_r+0x50>
 8003068:	2309      	movs	r3, #9
 800306a:	6033      	str	r3, [r6, #0]
 800306c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003070:	f04f 30ff 	mov.w	r0, #4294967295
 8003074:	81a3      	strh	r3, [r4, #12]
 8003076:	e03e      	b.n	80030f6 <__swsetup_r+0xba>
 8003078:	4b25      	ldr	r3, [pc, #148]	; (8003110 <__swsetup_r+0xd4>)
 800307a:	429c      	cmp	r4, r3
 800307c:	d101      	bne.n	8003082 <__swsetup_r+0x46>
 800307e:	68ac      	ldr	r4, [r5, #8]
 8003080:	e7eb      	b.n	800305a <__swsetup_r+0x1e>
 8003082:	4b24      	ldr	r3, [pc, #144]	; (8003114 <__swsetup_r+0xd8>)
 8003084:	429c      	cmp	r4, r3
 8003086:	bf08      	it	eq
 8003088:	68ec      	ldreq	r4, [r5, #12]
 800308a:	e7e6      	b.n	800305a <__swsetup_r+0x1e>
 800308c:	0758      	lsls	r0, r3, #29
 800308e:	d512      	bpl.n	80030b6 <__swsetup_r+0x7a>
 8003090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003092:	b141      	cbz	r1, 80030a6 <__swsetup_r+0x6a>
 8003094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003098:	4299      	cmp	r1, r3
 800309a:	d002      	beq.n	80030a2 <__swsetup_r+0x66>
 800309c:	4630      	mov	r0, r6
 800309e:	f000 fa57 	bl	8003550 <_free_r>
 80030a2:	2300      	movs	r3, #0
 80030a4:	6363      	str	r3, [r4, #52]	; 0x34
 80030a6:	89a3      	ldrh	r3, [r4, #12]
 80030a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80030ac:	81a3      	strh	r3, [r4, #12]
 80030ae:	2300      	movs	r3, #0
 80030b0:	6063      	str	r3, [r4, #4]
 80030b2:	6923      	ldr	r3, [r4, #16]
 80030b4:	6023      	str	r3, [r4, #0]
 80030b6:	89a3      	ldrh	r3, [r4, #12]
 80030b8:	f043 0308 	orr.w	r3, r3, #8
 80030bc:	81a3      	strh	r3, [r4, #12]
 80030be:	6923      	ldr	r3, [r4, #16]
 80030c0:	b94b      	cbnz	r3, 80030d6 <__swsetup_r+0x9a>
 80030c2:	89a3      	ldrh	r3, [r4, #12]
 80030c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80030c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030cc:	d003      	beq.n	80030d6 <__swsetup_r+0x9a>
 80030ce:	4621      	mov	r1, r4
 80030d0:	4630      	mov	r0, r6
 80030d2:	f000 f9fd 	bl	80034d0 <__smakebuf_r>
 80030d6:	89a0      	ldrh	r0, [r4, #12]
 80030d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80030dc:	f010 0301 	ands.w	r3, r0, #1
 80030e0:	d00a      	beq.n	80030f8 <__swsetup_r+0xbc>
 80030e2:	2300      	movs	r3, #0
 80030e4:	60a3      	str	r3, [r4, #8]
 80030e6:	6963      	ldr	r3, [r4, #20]
 80030e8:	425b      	negs	r3, r3
 80030ea:	61a3      	str	r3, [r4, #24]
 80030ec:	6923      	ldr	r3, [r4, #16]
 80030ee:	b943      	cbnz	r3, 8003102 <__swsetup_r+0xc6>
 80030f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80030f4:	d1ba      	bne.n	800306c <__swsetup_r+0x30>
 80030f6:	bd70      	pop	{r4, r5, r6, pc}
 80030f8:	0781      	lsls	r1, r0, #30
 80030fa:	bf58      	it	pl
 80030fc:	6963      	ldrpl	r3, [r4, #20]
 80030fe:	60a3      	str	r3, [r4, #8]
 8003100:	e7f4      	b.n	80030ec <__swsetup_r+0xb0>
 8003102:	2000      	movs	r0, #0
 8003104:	e7f7      	b.n	80030f6 <__swsetup_r+0xba>
 8003106:	bf00      	nop
 8003108:	2000000c 	.word	0x2000000c
 800310c:	08003f5c 	.word	0x08003f5c
 8003110:	08003f7c 	.word	0x08003f7c
 8003114:	08003f3c 	.word	0x08003f3c

08003118 <__sflush_r>:
 8003118:	898a      	ldrh	r2, [r1, #12]
 800311a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311c:	4605      	mov	r5, r0
 800311e:	0710      	lsls	r0, r2, #28
 8003120:	460c      	mov	r4, r1
 8003122:	d457      	bmi.n	80031d4 <__sflush_r+0xbc>
 8003124:	684b      	ldr	r3, [r1, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	dc04      	bgt.n	8003134 <__sflush_r+0x1c>
 800312a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800312c:	2b00      	cmp	r3, #0
 800312e:	dc01      	bgt.n	8003134 <__sflush_r+0x1c>
 8003130:	2000      	movs	r0, #0
 8003132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003134:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003136:	2e00      	cmp	r6, #0
 8003138:	d0fa      	beq.n	8003130 <__sflush_r+0x18>
 800313a:	2300      	movs	r3, #0
 800313c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003140:	682f      	ldr	r7, [r5, #0]
 8003142:	602b      	str	r3, [r5, #0]
 8003144:	d032      	beq.n	80031ac <__sflush_r+0x94>
 8003146:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003148:	89a3      	ldrh	r3, [r4, #12]
 800314a:	075a      	lsls	r2, r3, #29
 800314c:	d505      	bpl.n	800315a <__sflush_r+0x42>
 800314e:	6863      	ldr	r3, [r4, #4]
 8003150:	1ac0      	subs	r0, r0, r3
 8003152:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003154:	b10b      	cbz	r3, 800315a <__sflush_r+0x42>
 8003156:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003158:	1ac0      	subs	r0, r0, r3
 800315a:	2300      	movs	r3, #0
 800315c:	4602      	mov	r2, r0
 800315e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003160:	4628      	mov	r0, r5
 8003162:	6a21      	ldr	r1, [r4, #32]
 8003164:	47b0      	blx	r6
 8003166:	1c43      	adds	r3, r0, #1
 8003168:	89a3      	ldrh	r3, [r4, #12]
 800316a:	d106      	bne.n	800317a <__sflush_r+0x62>
 800316c:	6829      	ldr	r1, [r5, #0]
 800316e:	291d      	cmp	r1, #29
 8003170:	d82c      	bhi.n	80031cc <__sflush_r+0xb4>
 8003172:	4a29      	ldr	r2, [pc, #164]	; (8003218 <__sflush_r+0x100>)
 8003174:	40ca      	lsrs	r2, r1
 8003176:	07d6      	lsls	r6, r2, #31
 8003178:	d528      	bpl.n	80031cc <__sflush_r+0xb4>
 800317a:	2200      	movs	r2, #0
 800317c:	6062      	str	r2, [r4, #4]
 800317e:	6922      	ldr	r2, [r4, #16]
 8003180:	04d9      	lsls	r1, r3, #19
 8003182:	6022      	str	r2, [r4, #0]
 8003184:	d504      	bpl.n	8003190 <__sflush_r+0x78>
 8003186:	1c42      	adds	r2, r0, #1
 8003188:	d101      	bne.n	800318e <__sflush_r+0x76>
 800318a:	682b      	ldr	r3, [r5, #0]
 800318c:	b903      	cbnz	r3, 8003190 <__sflush_r+0x78>
 800318e:	6560      	str	r0, [r4, #84]	; 0x54
 8003190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003192:	602f      	str	r7, [r5, #0]
 8003194:	2900      	cmp	r1, #0
 8003196:	d0cb      	beq.n	8003130 <__sflush_r+0x18>
 8003198:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800319c:	4299      	cmp	r1, r3
 800319e:	d002      	beq.n	80031a6 <__sflush_r+0x8e>
 80031a0:	4628      	mov	r0, r5
 80031a2:	f000 f9d5 	bl	8003550 <_free_r>
 80031a6:	2000      	movs	r0, #0
 80031a8:	6360      	str	r0, [r4, #52]	; 0x34
 80031aa:	e7c2      	b.n	8003132 <__sflush_r+0x1a>
 80031ac:	6a21      	ldr	r1, [r4, #32]
 80031ae:	2301      	movs	r3, #1
 80031b0:	4628      	mov	r0, r5
 80031b2:	47b0      	blx	r6
 80031b4:	1c41      	adds	r1, r0, #1
 80031b6:	d1c7      	bne.n	8003148 <__sflush_r+0x30>
 80031b8:	682b      	ldr	r3, [r5, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0c4      	beq.n	8003148 <__sflush_r+0x30>
 80031be:	2b1d      	cmp	r3, #29
 80031c0:	d001      	beq.n	80031c6 <__sflush_r+0xae>
 80031c2:	2b16      	cmp	r3, #22
 80031c4:	d101      	bne.n	80031ca <__sflush_r+0xb2>
 80031c6:	602f      	str	r7, [r5, #0]
 80031c8:	e7b2      	b.n	8003130 <__sflush_r+0x18>
 80031ca:	89a3      	ldrh	r3, [r4, #12]
 80031cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031d0:	81a3      	strh	r3, [r4, #12]
 80031d2:	e7ae      	b.n	8003132 <__sflush_r+0x1a>
 80031d4:	690f      	ldr	r7, [r1, #16]
 80031d6:	2f00      	cmp	r7, #0
 80031d8:	d0aa      	beq.n	8003130 <__sflush_r+0x18>
 80031da:	0793      	lsls	r3, r2, #30
 80031dc:	bf18      	it	ne
 80031de:	2300      	movne	r3, #0
 80031e0:	680e      	ldr	r6, [r1, #0]
 80031e2:	bf08      	it	eq
 80031e4:	694b      	ldreq	r3, [r1, #20]
 80031e6:	1bf6      	subs	r6, r6, r7
 80031e8:	600f      	str	r7, [r1, #0]
 80031ea:	608b      	str	r3, [r1, #8]
 80031ec:	2e00      	cmp	r6, #0
 80031ee:	dd9f      	ble.n	8003130 <__sflush_r+0x18>
 80031f0:	4633      	mov	r3, r6
 80031f2:	463a      	mov	r2, r7
 80031f4:	4628      	mov	r0, r5
 80031f6:	6a21      	ldr	r1, [r4, #32]
 80031f8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80031fc:	47e0      	blx	ip
 80031fe:	2800      	cmp	r0, #0
 8003200:	dc06      	bgt.n	8003210 <__sflush_r+0xf8>
 8003202:	89a3      	ldrh	r3, [r4, #12]
 8003204:	f04f 30ff 	mov.w	r0, #4294967295
 8003208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800320c:	81a3      	strh	r3, [r4, #12]
 800320e:	e790      	b.n	8003132 <__sflush_r+0x1a>
 8003210:	4407      	add	r7, r0
 8003212:	1a36      	subs	r6, r6, r0
 8003214:	e7ea      	b.n	80031ec <__sflush_r+0xd4>
 8003216:	bf00      	nop
 8003218:	20400001 	.word	0x20400001

0800321c <_fflush_r>:
 800321c:	b538      	push	{r3, r4, r5, lr}
 800321e:	690b      	ldr	r3, [r1, #16]
 8003220:	4605      	mov	r5, r0
 8003222:	460c      	mov	r4, r1
 8003224:	b913      	cbnz	r3, 800322c <_fflush_r+0x10>
 8003226:	2500      	movs	r5, #0
 8003228:	4628      	mov	r0, r5
 800322a:	bd38      	pop	{r3, r4, r5, pc}
 800322c:	b118      	cbz	r0, 8003236 <_fflush_r+0x1a>
 800322e:	6983      	ldr	r3, [r0, #24]
 8003230:	b90b      	cbnz	r3, 8003236 <_fflush_r+0x1a>
 8003232:	f000 f887 	bl	8003344 <__sinit>
 8003236:	4b14      	ldr	r3, [pc, #80]	; (8003288 <_fflush_r+0x6c>)
 8003238:	429c      	cmp	r4, r3
 800323a:	d11b      	bne.n	8003274 <_fflush_r+0x58>
 800323c:	686c      	ldr	r4, [r5, #4]
 800323e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0ef      	beq.n	8003226 <_fflush_r+0xa>
 8003246:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003248:	07d0      	lsls	r0, r2, #31
 800324a:	d404      	bmi.n	8003256 <_fflush_r+0x3a>
 800324c:	0599      	lsls	r1, r3, #22
 800324e:	d402      	bmi.n	8003256 <_fflush_r+0x3a>
 8003250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003252:	f000 f915 	bl	8003480 <__retarget_lock_acquire_recursive>
 8003256:	4628      	mov	r0, r5
 8003258:	4621      	mov	r1, r4
 800325a:	f7ff ff5d 	bl	8003118 <__sflush_r>
 800325e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003260:	4605      	mov	r5, r0
 8003262:	07da      	lsls	r2, r3, #31
 8003264:	d4e0      	bmi.n	8003228 <_fflush_r+0xc>
 8003266:	89a3      	ldrh	r3, [r4, #12]
 8003268:	059b      	lsls	r3, r3, #22
 800326a:	d4dd      	bmi.n	8003228 <_fflush_r+0xc>
 800326c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800326e:	f000 f908 	bl	8003482 <__retarget_lock_release_recursive>
 8003272:	e7d9      	b.n	8003228 <_fflush_r+0xc>
 8003274:	4b05      	ldr	r3, [pc, #20]	; (800328c <_fflush_r+0x70>)
 8003276:	429c      	cmp	r4, r3
 8003278:	d101      	bne.n	800327e <_fflush_r+0x62>
 800327a:	68ac      	ldr	r4, [r5, #8]
 800327c:	e7df      	b.n	800323e <_fflush_r+0x22>
 800327e:	4b04      	ldr	r3, [pc, #16]	; (8003290 <_fflush_r+0x74>)
 8003280:	429c      	cmp	r4, r3
 8003282:	bf08      	it	eq
 8003284:	68ec      	ldreq	r4, [r5, #12]
 8003286:	e7da      	b.n	800323e <_fflush_r+0x22>
 8003288:	08003f5c 	.word	0x08003f5c
 800328c:	08003f7c 	.word	0x08003f7c
 8003290:	08003f3c 	.word	0x08003f3c

08003294 <std>:
 8003294:	2300      	movs	r3, #0
 8003296:	b510      	push	{r4, lr}
 8003298:	4604      	mov	r4, r0
 800329a:	e9c0 3300 	strd	r3, r3, [r0]
 800329e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032a2:	6083      	str	r3, [r0, #8]
 80032a4:	8181      	strh	r1, [r0, #12]
 80032a6:	6643      	str	r3, [r0, #100]	; 0x64
 80032a8:	81c2      	strh	r2, [r0, #14]
 80032aa:	6183      	str	r3, [r0, #24]
 80032ac:	4619      	mov	r1, r3
 80032ae:	2208      	movs	r2, #8
 80032b0:	305c      	adds	r0, #92	; 0x5c
 80032b2:	f7ff fddb 	bl	8002e6c <memset>
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <std+0x38>)
 80032b8:	6224      	str	r4, [r4, #32]
 80032ba:	6263      	str	r3, [r4, #36]	; 0x24
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <std+0x3c>)
 80032be:	62a3      	str	r3, [r4, #40]	; 0x28
 80032c0:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <std+0x40>)
 80032c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032c4:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <std+0x44>)
 80032c6:	6323      	str	r3, [r4, #48]	; 0x30
 80032c8:	bd10      	pop	{r4, pc}
 80032ca:	bf00      	nop
 80032cc:	08003d05 	.word	0x08003d05
 80032d0:	08003d27 	.word	0x08003d27
 80032d4:	08003d5f 	.word	0x08003d5f
 80032d8:	08003d83 	.word	0x08003d83

080032dc <_cleanup_r>:
 80032dc:	4901      	ldr	r1, [pc, #4]	; (80032e4 <_cleanup_r+0x8>)
 80032de:	f000 b8af 	b.w	8003440 <_fwalk_reent>
 80032e2:	bf00      	nop
 80032e4:	0800321d 	.word	0x0800321d

080032e8 <__sfmoreglue>:
 80032e8:	2268      	movs	r2, #104	; 0x68
 80032ea:	b570      	push	{r4, r5, r6, lr}
 80032ec:	1e4d      	subs	r5, r1, #1
 80032ee:	4355      	muls	r5, r2
 80032f0:	460e      	mov	r6, r1
 80032f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80032f6:	f000 f993 	bl	8003620 <_malloc_r>
 80032fa:	4604      	mov	r4, r0
 80032fc:	b140      	cbz	r0, 8003310 <__sfmoreglue+0x28>
 80032fe:	2100      	movs	r1, #0
 8003300:	e9c0 1600 	strd	r1, r6, [r0]
 8003304:	300c      	adds	r0, #12
 8003306:	60a0      	str	r0, [r4, #8]
 8003308:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800330c:	f7ff fdae 	bl	8002e6c <memset>
 8003310:	4620      	mov	r0, r4
 8003312:	bd70      	pop	{r4, r5, r6, pc}

08003314 <__sfp_lock_acquire>:
 8003314:	4801      	ldr	r0, [pc, #4]	; (800331c <__sfp_lock_acquire+0x8>)
 8003316:	f000 b8b3 	b.w	8003480 <__retarget_lock_acquire_recursive>
 800331a:	bf00      	nop
 800331c:	20000159 	.word	0x20000159

08003320 <__sfp_lock_release>:
 8003320:	4801      	ldr	r0, [pc, #4]	; (8003328 <__sfp_lock_release+0x8>)
 8003322:	f000 b8ae 	b.w	8003482 <__retarget_lock_release_recursive>
 8003326:	bf00      	nop
 8003328:	20000159 	.word	0x20000159

0800332c <__sinit_lock_acquire>:
 800332c:	4801      	ldr	r0, [pc, #4]	; (8003334 <__sinit_lock_acquire+0x8>)
 800332e:	f000 b8a7 	b.w	8003480 <__retarget_lock_acquire_recursive>
 8003332:	bf00      	nop
 8003334:	2000015a 	.word	0x2000015a

08003338 <__sinit_lock_release>:
 8003338:	4801      	ldr	r0, [pc, #4]	; (8003340 <__sinit_lock_release+0x8>)
 800333a:	f000 b8a2 	b.w	8003482 <__retarget_lock_release_recursive>
 800333e:	bf00      	nop
 8003340:	2000015a 	.word	0x2000015a

08003344 <__sinit>:
 8003344:	b510      	push	{r4, lr}
 8003346:	4604      	mov	r4, r0
 8003348:	f7ff fff0 	bl	800332c <__sinit_lock_acquire>
 800334c:	69a3      	ldr	r3, [r4, #24]
 800334e:	b11b      	cbz	r3, 8003358 <__sinit+0x14>
 8003350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003354:	f7ff bff0 	b.w	8003338 <__sinit_lock_release>
 8003358:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800335c:	6523      	str	r3, [r4, #80]	; 0x50
 800335e:	4b13      	ldr	r3, [pc, #76]	; (80033ac <__sinit+0x68>)
 8003360:	4a13      	ldr	r2, [pc, #76]	; (80033b0 <__sinit+0x6c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	62a2      	str	r2, [r4, #40]	; 0x28
 8003366:	42a3      	cmp	r3, r4
 8003368:	bf08      	it	eq
 800336a:	2301      	moveq	r3, #1
 800336c:	4620      	mov	r0, r4
 800336e:	bf08      	it	eq
 8003370:	61a3      	streq	r3, [r4, #24]
 8003372:	f000 f81f 	bl	80033b4 <__sfp>
 8003376:	6060      	str	r0, [r4, #4]
 8003378:	4620      	mov	r0, r4
 800337a:	f000 f81b 	bl	80033b4 <__sfp>
 800337e:	60a0      	str	r0, [r4, #8]
 8003380:	4620      	mov	r0, r4
 8003382:	f000 f817 	bl	80033b4 <__sfp>
 8003386:	2200      	movs	r2, #0
 8003388:	2104      	movs	r1, #4
 800338a:	60e0      	str	r0, [r4, #12]
 800338c:	6860      	ldr	r0, [r4, #4]
 800338e:	f7ff ff81 	bl	8003294 <std>
 8003392:	2201      	movs	r2, #1
 8003394:	2109      	movs	r1, #9
 8003396:	68a0      	ldr	r0, [r4, #8]
 8003398:	f7ff ff7c 	bl	8003294 <std>
 800339c:	2202      	movs	r2, #2
 800339e:	2112      	movs	r1, #18
 80033a0:	68e0      	ldr	r0, [r4, #12]
 80033a2:	f7ff ff77 	bl	8003294 <std>
 80033a6:	2301      	movs	r3, #1
 80033a8:	61a3      	str	r3, [r4, #24]
 80033aa:	e7d1      	b.n	8003350 <__sinit+0xc>
 80033ac:	08003f38 	.word	0x08003f38
 80033b0:	080032dd 	.word	0x080032dd

080033b4 <__sfp>:
 80033b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b6:	4607      	mov	r7, r0
 80033b8:	f7ff ffac 	bl	8003314 <__sfp_lock_acquire>
 80033bc:	4b1e      	ldr	r3, [pc, #120]	; (8003438 <__sfp+0x84>)
 80033be:	681e      	ldr	r6, [r3, #0]
 80033c0:	69b3      	ldr	r3, [r6, #24]
 80033c2:	b913      	cbnz	r3, 80033ca <__sfp+0x16>
 80033c4:	4630      	mov	r0, r6
 80033c6:	f7ff ffbd 	bl	8003344 <__sinit>
 80033ca:	3648      	adds	r6, #72	; 0x48
 80033cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80033d0:	3b01      	subs	r3, #1
 80033d2:	d503      	bpl.n	80033dc <__sfp+0x28>
 80033d4:	6833      	ldr	r3, [r6, #0]
 80033d6:	b30b      	cbz	r3, 800341c <__sfp+0x68>
 80033d8:	6836      	ldr	r6, [r6, #0]
 80033da:	e7f7      	b.n	80033cc <__sfp+0x18>
 80033dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80033e0:	b9d5      	cbnz	r5, 8003418 <__sfp+0x64>
 80033e2:	4b16      	ldr	r3, [pc, #88]	; (800343c <__sfp+0x88>)
 80033e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80033e8:	60e3      	str	r3, [r4, #12]
 80033ea:	6665      	str	r5, [r4, #100]	; 0x64
 80033ec:	f000 f847 	bl	800347e <__retarget_lock_init_recursive>
 80033f0:	f7ff ff96 	bl	8003320 <__sfp_lock_release>
 80033f4:	2208      	movs	r2, #8
 80033f6:	4629      	mov	r1, r5
 80033f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80033fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003400:	6025      	str	r5, [r4, #0]
 8003402:	61a5      	str	r5, [r4, #24]
 8003404:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003408:	f7ff fd30 	bl	8002e6c <memset>
 800340c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003410:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003414:	4620      	mov	r0, r4
 8003416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003418:	3468      	adds	r4, #104	; 0x68
 800341a:	e7d9      	b.n	80033d0 <__sfp+0x1c>
 800341c:	2104      	movs	r1, #4
 800341e:	4638      	mov	r0, r7
 8003420:	f7ff ff62 	bl	80032e8 <__sfmoreglue>
 8003424:	4604      	mov	r4, r0
 8003426:	6030      	str	r0, [r6, #0]
 8003428:	2800      	cmp	r0, #0
 800342a:	d1d5      	bne.n	80033d8 <__sfp+0x24>
 800342c:	f7ff ff78 	bl	8003320 <__sfp_lock_release>
 8003430:	230c      	movs	r3, #12
 8003432:	603b      	str	r3, [r7, #0]
 8003434:	e7ee      	b.n	8003414 <__sfp+0x60>
 8003436:	bf00      	nop
 8003438:	08003f38 	.word	0x08003f38
 800343c:	ffff0001 	.word	0xffff0001

08003440 <_fwalk_reent>:
 8003440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003444:	4606      	mov	r6, r0
 8003446:	4688      	mov	r8, r1
 8003448:	2700      	movs	r7, #0
 800344a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800344e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003452:	f1b9 0901 	subs.w	r9, r9, #1
 8003456:	d505      	bpl.n	8003464 <_fwalk_reent+0x24>
 8003458:	6824      	ldr	r4, [r4, #0]
 800345a:	2c00      	cmp	r4, #0
 800345c:	d1f7      	bne.n	800344e <_fwalk_reent+0xe>
 800345e:	4638      	mov	r0, r7
 8003460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003464:	89ab      	ldrh	r3, [r5, #12]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d907      	bls.n	800347a <_fwalk_reent+0x3a>
 800346a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800346e:	3301      	adds	r3, #1
 8003470:	d003      	beq.n	800347a <_fwalk_reent+0x3a>
 8003472:	4629      	mov	r1, r5
 8003474:	4630      	mov	r0, r6
 8003476:	47c0      	blx	r8
 8003478:	4307      	orrs	r7, r0
 800347a:	3568      	adds	r5, #104	; 0x68
 800347c:	e7e9      	b.n	8003452 <_fwalk_reent+0x12>

0800347e <__retarget_lock_init_recursive>:
 800347e:	4770      	bx	lr

08003480 <__retarget_lock_acquire_recursive>:
 8003480:	4770      	bx	lr

08003482 <__retarget_lock_release_recursive>:
 8003482:	4770      	bx	lr

08003484 <__swhatbuf_r>:
 8003484:	b570      	push	{r4, r5, r6, lr}
 8003486:	460e      	mov	r6, r1
 8003488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800348c:	4614      	mov	r4, r2
 800348e:	2900      	cmp	r1, #0
 8003490:	461d      	mov	r5, r3
 8003492:	b096      	sub	sp, #88	; 0x58
 8003494:	da08      	bge.n	80034a8 <__swhatbuf_r+0x24>
 8003496:	2200      	movs	r2, #0
 8003498:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800349c:	602a      	str	r2, [r5, #0]
 800349e:	061a      	lsls	r2, r3, #24
 80034a0:	d410      	bmi.n	80034c4 <__swhatbuf_r+0x40>
 80034a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034a6:	e00e      	b.n	80034c6 <__swhatbuf_r+0x42>
 80034a8:	466a      	mov	r2, sp
 80034aa:	f000 fc91 	bl	8003dd0 <_fstat_r>
 80034ae:	2800      	cmp	r0, #0
 80034b0:	dbf1      	blt.n	8003496 <__swhatbuf_r+0x12>
 80034b2:	9a01      	ldr	r2, [sp, #4]
 80034b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80034b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80034bc:	425a      	negs	r2, r3
 80034be:	415a      	adcs	r2, r3
 80034c0:	602a      	str	r2, [r5, #0]
 80034c2:	e7ee      	b.n	80034a2 <__swhatbuf_r+0x1e>
 80034c4:	2340      	movs	r3, #64	; 0x40
 80034c6:	2000      	movs	r0, #0
 80034c8:	6023      	str	r3, [r4, #0]
 80034ca:	b016      	add	sp, #88	; 0x58
 80034cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080034d0 <__smakebuf_r>:
 80034d0:	898b      	ldrh	r3, [r1, #12]
 80034d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80034d4:	079d      	lsls	r5, r3, #30
 80034d6:	4606      	mov	r6, r0
 80034d8:	460c      	mov	r4, r1
 80034da:	d507      	bpl.n	80034ec <__smakebuf_r+0x1c>
 80034dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80034e0:	6023      	str	r3, [r4, #0]
 80034e2:	6123      	str	r3, [r4, #16]
 80034e4:	2301      	movs	r3, #1
 80034e6:	6163      	str	r3, [r4, #20]
 80034e8:	b002      	add	sp, #8
 80034ea:	bd70      	pop	{r4, r5, r6, pc}
 80034ec:	466a      	mov	r2, sp
 80034ee:	ab01      	add	r3, sp, #4
 80034f0:	f7ff ffc8 	bl	8003484 <__swhatbuf_r>
 80034f4:	9900      	ldr	r1, [sp, #0]
 80034f6:	4605      	mov	r5, r0
 80034f8:	4630      	mov	r0, r6
 80034fa:	f000 f891 	bl	8003620 <_malloc_r>
 80034fe:	b948      	cbnz	r0, 8003514 <__smakebuf_r+0x44>
 8003500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003504:	059a      	lsls	r2, r3, #22
 8003506:	d4ef      	bmi.n	80034e8 <__smakebuf_r+0x18>
 8003508:	f023 0303 	bic.w	r3, r3, #3
 800350c:	f043 0302 	orr.w	r3, r3, #2
 8003510:	81a3      	strh	r3, [r4, #12]
 8003512:	e7e3      	b.n	80034dc <__smakebuf_r+0xc>
 8003514:	4b0d      	ldr	r3, [pc, #52]	; (800354c <__smakebuf_r+0x7c>)
 8003516:	62b3      	str	r3, [r6, #40]	; 0x28
 8003518:	89a3      	ldrh	r3, [r4, #12]
 800351a:	6020      	str	r0, [r4, #0]
 800351c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003520:	81a3      	strh	r3, [r4, #12]
 8003522:	9b00      	ldr	r3, [sp, #0]
 8003524:	6120      	str	r0, [r4, #16]
 8003526:	6163      	str	r3, [r4, #20]
 8003528:	9b01      	ldr	r3, [sp, #4]
 800352a:	b15b      	cbz	r3, 8003544 <__smakebuf_r+0x74>
 800352c:	4630      	mov	r0, r6
 800352e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003532:	f000 fc5f 	bl	8003df4 <_isatty_r>
 8003536:	b128      	cbz	r0, 8003544 <__smakebuf_r+0x74>
 8003538:	89a3      	ldrh	r3, [r4, #12]
 800353a:	f023 0303 	bic.w	r3, r3, #3
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	81a3      	strh	r3, [r4, #12]
 8003544:	89a0      	ldrh	r0, [r4, #12]
 8003546:	4305      	orrs	r5, r0
 8003548:	81a5      	strh	r5, [r4, #12]
 800354a:	e7cd      	b.n	80034e8 <__smakebuf_r+0x18>
 800354c:	080032dd 	.word	0x080032dd

08003550 <_free_r>:
 8003550:	b538      	push	{r3, r4, r5, lr}
 8003552:	4605      	mov	r5, r0
 8003554:	2900      	cmp	r1, #0
 8003556:	d040      	beq.n	80035da <_free_r+0x8a>
 8003558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800355c:	1f0c      	subs	r4, r1, #4
 800355e:	2b00      	cmp	r3, #0
 8003560:	bfb8      	it	lt
 8003562:	18e4      	addlt	r4, r4, r3
 8003564:	f000 fc76 	bl	8003e54 <__malloc_lock>
 8003568:	4a1c      	ldr	r2, [pc, #112]	; (80035dc <_free_r+0x8c>)
 800356a:	6813      	ldr	r3, [r2, #0]
 800356c:	b933      	cbnz	r3, 800357c <_free_r+0x2c>
 800356e:	6063      	str	r3, [r4, #4]
 8003570:	6014      	str	r4, [r2, #0]
 8003572:	4628      	mov	r0, r5
 8003574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003578:	f000 bc72 	b.w	8003e60 <__malloc_unlock>
 800357c:	42a3      	cmp	r3, r4
 800357e:	d908      	bls.n	8003592 <_free_r+0x42>
 8003580:	6820      	ldr	r0, [r4, #0]
 8003582:	1821      	adds	r1, r4, r0
 8003584:	428b      	cmp	r3, r1
 8003586:	bf01      	itttt	eq
 8003588:	6819      	ldreq	r1, [r3, #0]
 800358a:	685b      	ldreq	r3, [r3, #4]
 800358c:	1809      	addeq	r1, r1, r0
 800358e:	6021      	streq	r1, [r4, #0]
 8003590:	e7ed      	b.n	800356e <_free_r+0x1e>
 8003592:	461a      	mov	r2, r3
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	b10b      	cbz	r3, 800359c <_free_r+0x4c>
 8003598:	42a3      	cmp	r3, r4
 800359a:	d9fa      	bls.n	8003592 <_free_r+0x42>
 800359c:	6811      	ldr	r1, [r2, #0]
 800359e:	1850      	adds	r0, r2, r1
 80035a0:	42a0      	cmp	r0, r4
 80035a2:	d10b      	bne.n	80035bc <_free_r+0x6c>
 80035a4:	6820      	ldr	r0, [r4, #0]
 80035a6:	4401      	add	r1, r0
 80035a8:	1850      	adds	r0, r2, r1
 80035aa:	4283      	cmp	r3, r0
 80035ac:	6011      	str	r1, [r2, #0]
 80035ae:	d1e0      	bne.n	8003572 <_free_r+0x22>
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	4401      	add	r1, r0
 80035b6:	6011      	str	r1, [r2, #0]
 80035b8:	6053      	str	r3, [r2, #4]
 80035ba:	e7da      	b.n	8003572 <_free_r+0x22>
 80035bc:	d902      	bls.n	80035c4 <_free_r+0x74>
 80035be:	230c      	movs	r3, #12
 80035c0:	602b      	str	r3, [r5, #0]
 80035c2:	e7d6      	b.n	8003572 <_free_r+0x22>
 80035c4:	6820      	ldr	r0, [r4, #0]
 80035c6:	1821      	adds	r1, r4, r0
 80035c8:	428b      	cmp	r3, r1
 80035ca:	bf01      	itttt	eq
 80035cc:	6819      	ldreq	r1, [r3, #0]
 80035ce:	685b      	ldreq	r3, [r3, #4]
 80035d0:	1809      	addeq	r1, r1, r0
 80035d2:	6021      	streq	r1, [r4, #0]
 80035d4:	6063      	str	r3, [r4, #4]
 80035d6:	6054      	str	r4, [r2, #4]
 80035d8:	e7cb      	b.n	8003572 <_free_r+0x22>
 80035da:	bd38      	pop	{r3, r4, r5, pc}
 80035dc:	2000015c 	.word	0x2000015c

080035e0 <sbrk_aligned>:
 80035e0:	b570      	push	{r4, r5, r6, lr}
 80035e2:	4e0e      	ldr	r6, [pc, #56]	; (800361c <sbrk_aligned+0x3c>)
 80035e4:	460c      	mov	r4, r1
 80035e6:	6831      	ldr	r1, [r6, #0]
 80035e8:	4605      	mov	r5, r0
 80035ea:	b911      	cbnz	r1, 80035f2 <sbrk_aligned+0x12>
 80035ec:	f000 fb7a 	bl	8003ce4 <_sbrk_r>
 80035f0:	6030      	str	r0, [r6, #0]
 80035f2:	4621      	mov	r1, r4
 80035f4:	4628      	mov	r0, r5
 80035f6:	f000 fb75 	bl	8003ce4 <_sbrk_r>
 80035fa:	1c43      	adds	r3, r0, #1
 80035fc:	d00a      	beq.n	8003614 <sbrk_aligned+0x34>
 80035fe:	1cc4      	adds	r4, r0, #3
 8003600:	f024 0403 	bic.w	r4, r4, #3
 8003604:	42a0      	cmp	r0, r4
 8003606:	d007      	beq.n	8003618 <sbrk_aligned+0x38>
 8003608:	1a21      	subs	r1, r4, r0
 800360a:	4628      	mov	r0, r5
 800360c:	f000 fb6a 	bl	8003ce4 <_sbrk_r>
 8003610:	3001      	adds	r0, #1
 8003612:	d101      	bne.n	8003618 <sbrk_aligned+0x38>
 8003614:	f04f 34ff 	mov.w	r4, #4294967295
 8003618:	4620      	mov	r0, r4
 800361a:	bd70      	pop	{r4, r5, r6, pc}
 800361c:	20000160 	.word	0x20000160

08003620 <_malloc_r>:
 8003620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003624:	1ccd      	adds	r5, r1, #3
 8003626:	f025 0503 	bic.w	r5, r5, #3
 800362a:	3508      	adds	r5, #8
 800362c:	2d0c      	cmp	r5, #12
 800362e:	bf38      	it	cc
 8003630:	250c      	movcc	r5, #12
 8003632:	2d00      	cmp	r5, #0
 8003634:	4607      	mov	r7, r0
 8003636:	db01      	blt.n	800363c <_malloc_r+0x1c>
 8003638:	42a9      	cmp	r1, r5
 800363a:	d905      	bls.n	8003648 <_malloc_r+0x28>
 800363c:	230c      	movs	r3, #12
 800363e:	2600      	movs	r6, #0
 8003640:	603b      	str	r3, [r7, #0]
 8003642:	4630      	mov	r0, r6
 8003644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003648:	4e2e      	ldr	r6, [pc, #184]	; (8003704 <_malloc_r+0xe4>)
 800364a:	f000 fc03 	bl	8003e54 <__malloc_lock>
 800364e:	6833      	ldr	r3, [r6, #0]
 8003650:	461c      	mov	r4, r3
 8003652:	bb34      	cbnz	r4, 80036a2 <_malloc_r+0x82>
 8003654:	4629      	mov	r1, r5
 8003656:	4638      	mov	r0, r7
 8003658:	f7ff ffc2 	bl	80035e0 <sbrk_aligned>
 800365c:	1c43      	adds	r3, r0, #1
 800365e:	4604      	mov	r4, r0
 8003660:	d14d      	bne.n	80036fe <_malloc_r+0xde>
 8003662:	6834      	ldr	r4, [r6, #0]
 8003664:	4626      	mov	r6, r4
 8003666:	2e00      	cmp	r6, #0
 8003668:	d140      	bne.n	80036ec <_malloc_r+0xcc>
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	4631      	mov	r1, r6
 800366e:	4638      	mov	r0, r7
 8003670:	eb04 0803 	add.w	r8, r4, r3
 8003674:	f000 fb36 	bl	8003ce4 <_sbrk_r>
 8003678:	4580      	cmp	r8, r0
 800367a:	d13a      	bne.n	80036f2 <_malloc_r+0xd2>
 800367c:	6821      	ldr	r1, [r4, #0]
 800367e:	3503      	adds	r5, #3
 8003680:	1a6d      	subs	r5, r5, r1
 8003682:	f025 0503 	bic.w	r5, r5, #3
 8003686:	3508      	adds	r5, #8
 8003688:	2d0c      	cmp	r5, #12
 800368a:	bf38      	it	cc
 800368c:	250c      	movcc	r5, #12
 800368e:	4638      	mov	r0, r7
 8003690:	4629      	mov	r1, r5
 8003692:	f7ff ffa5 	bl	80035e0 <sbrk_aligned>
 8003696:	3001      	adds	r0, #1
 8003698:	d02b      	beq.n	80036f2 <_malloc_r+0xd2>
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	442b      	add	r3, r5
 800369e:	6023      	str	r3, [r4, #0]
 80036a0:	e00e      	b.n	80036c0 <_malloc_r+0xa0>
 80036a2:	6822      	ldr	r2, [r4, #0]
 80036a4:	1b52      	subs	r2, r2, r5
 80036a6:	d41e      	bmi.n	80036e6 <_malloc_r+0xc6>
 80036a8:	2a0b      	cmp	r2, #11
 80036aa:	d916      	bls.n	80036da <_malloc_r+0xba>
 80036ac:	1961      	adds	r1, r4, r5
 80036ae:	42a3      	cmp	r3, r4
 80036b0:	6025      	str	r5, [r4, #0]
 80036b2:	bf18      	it	ne
 80036b4:	6059      	strne	r1, [r3, #4]
 80036b6:	6863      	ldr	r3, [r4, #4]
 80036b8:	bf08      	it	eq
 80036ba:	6031      	streq	r1, [r6, #0]
 80036bc:	5162      	str	r2, [r4, r5]
 80036be:	604b      	str	r3, [r1, #4]
 80036c0:	4638      	mov	r0, r7
 80036c2:	f104 060b 	add.w	r6, r4, #11
 80036c6:	f000 fbcb 	bl	8003e60 <__malloc_unlock>
 80036ca:	f026 0607 	bic.w	r6, r6, #7
 80036ce:	1d23      	adds	r3, r4, #4
 80036d0:	1af2      	subs	r2, r6, r3
 80036d2:	d0b6      	beq.n	8003642 <_malloc_r+0x22>
 80036d4:	1b9b      	subs	r3, r3, r6
 80036d6:	50a3      	str	r3, [r4, r2]
 80036d8:	e7b3      	b.n	8003642 <_malloc_r+0x22>
 80036da:	6862      	ldr	r2, [r4, #4]
 80036dc:	42a3      	cmp	r3, r4
 80036de:	bf0c      	ite	eq
 80036e0:	6032      	streq	r2, [r6, #0]
 80036e2:	605a      	strne	r2, [r3, #4]
 80036e4:	e7ec      	b.n	80036c0 <_malloc_r+0xa0>
 80036e6:	4623      	mov	r3, r4
 80036e8:	6864      	ldr	r4, [r4, #4]
 80036ea:	e7b2      	b.n	8003652 <_malloc_r+0x32>
 80036ec:	4634      	mov	r4, r6
 80036ee:	6876      	ldr	r6, [r6, #4]
 80036f0:	e7b9      	b.n	8003666 <_malloc_r+0x46>
 80036f2:	230c      	movs	r3, #12
 80036f4:	4638      	mov	r0, r7
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	f000 fbb2 	bl	8003e60 <__malloc_unlock>
 80036fc:	e7a1      	b.n	8003642 <_malloc_r+0x22>
 80036fe:	6025      	str	r5, [r4, #0]
 8003700:	e7de      	b.n	80036c0 <_malloc_r+0xa0>
 8003702:	bf00      	nop
 8003704:	2000015c 	.word	0x2000015c

08003708 <__sfputc_r>:
 8003708:	6893      	ldr	r3, [r2, #8]
 800370a:	b410      	push	{r4}
 800370c:	3b01      	subs	r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	6093      	str	r3, [r2, #8]
 8003712:	da07      	bge.n	8003724 <__sfputc_r+0x1c>
 8003714:	6994      	ldr	r4, [r2, #24]
 8003716:	42a3      	cmp	r3, r4
 8003718:	db01      	blt.n	800371e <__sfputc_r+0x16>
 800371a:	290a      	cmp	r1, #10
 800371c:	d102      	bne.n	8003724 <__sfputc_r+0x1c>
 800371e:	bc10      	pop	{r4}
 8003720:	f7ff bc3a 	b.w	8002f98 <__swbuf_r>
 8003724:	6813      	ldr	r3, [r2, #0]
 8003726:	1c58      	adds	r0, r3, #1
 8003728:	6010      	str	r0, [r2, #0]
 800372a:	7019      	strb	r1, [r3, #0]
 800372c:	4608      	mov	r0, r1
 800372e:	bc10      	pop	{r4}
 8003730:	4770      	bx	lr

08003732 <__sfputs_r>:
 8003732:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003734:	4606      	mov	r6, r0
 8003736:	460f      	mov	r7, r1
 8003738:	4614      	mov	r4, r2
 800373a:	18d5      	adds	r5, r2, r3
 800373c:	42ac      	cmp	r4, r5
 800373e:	d101      	bne.n	8003744 <__sfputs_r+0x12>
 8003740:	2000      	movs	r0, #0
 8003742:	e007      	b.n	8003754 <__sfputs_r+0x22>
 8003744:	463a      	mov	r2, r7
 8003746:	4630      	mov	r0, r6
 8003748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800374c:	f7ff ffdc 	bl	8003708 <__sfputc_r>
 8003750:	1c43      	adds	r3, r0, #1
 8003752:	d1f3      	bne.n	800373c <__sfputs_r+0xa>
 8003754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003758 <_vfiprintf_r>:
 8003758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800375c:	460d      	mov	r5, r1
 800375e:	4614      	mov	r4, r2
 8003760:	4698      	mov	r8, r3
 8003762:	4606      	mov	r6, r0
 8003764:	b09d      	sub	sp, #116	; 0x74
 8003766:	b118      	cbz	r0, 8003770 <_vfiprintf_r+0x18>
 8003768:	6983      	ldr	r3, [r0, #24]
 800376a:	b90b      	cbnz	r3, 8003770 <_vfiprintf_r+0x18>
 800376c:	f7ff fdea 	bl	8003344 <__sinit>
 8003770:	4b89      	ldr	r3, [pc, #548]	; (8003998 <_vfiprintf_r+0x240>)
 8003772:	429d      	cmp	r5, r3
 8003774:	d11b      	bne.n	80037ae <_vfiprintf_r+0x56>
 8003776:	6875      	ldr	r5, [r6, #4]
 8003778:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800377a:	07d9      	lsls	r1, r3, #31
 800377c:	d405      	bmi.n	800378a <_vfiprintf_r+0x32>
 800377e:	89ab      	ldrh	r3, [r5, #12]
 8003780:	059a      	lsls	r2, r3, #22
 8003782:	d402      	bmi.n	800378a <_vfiprintf_r+0x32>
 8003784:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003786:	f7ff fe7b 	bl	8003480 <__retarget_lock_acquire_recursive>
 800378a:	89ab      	ldrh	r3, [r5, #12]
 800378c:	071b      	lsls	r3, r3, #28
 800378e:	d501      	bpl.n	8003794 <_vfiprintf_r+0x3c>
 8003790:	692b      	ldr	r3, [r5, #16]
 8003792:	b9eb      	cbnz	r3, 80037d0 <_vfiprintf_r+0x78>
 8003794:	4629      	mov	r1, r5
 8003796:	4630      	mov	r0, r6
 8003798:	f7ff fc50 	bl	800303c <__swsetup_r>
 800379c:	b1c0      	cbz	r0, 80037d0 <_vfiprintf_r+0x78>
 800379e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80037a0:	07dc      	lsls	r4, r3, #31
 80037a2:	d50e      	bpl.n	80037c2 <_vfiprintf_r+0x6a>
 80037a4:	f04f 30ff 	mov.w	r0, #4294967295
 80037a8:	b01d      	add	sp, #116	; 0x74
 80037aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037ae:	4b7b      	ldr	r3, [pc, #492]	; (800399c <_vfiprintf_r+0x244>)
 80037b0:	429d      	cmp	r5, r3
 80037b2:	d101      	bne.n	80037b8 <_vfiprintf_r+0x60>
 80037b4:	68b5      	ldr	r5, [r6, #8]
 80037b6:	e7df      	b.n	8003778 <_vfiprintf_r+0x20>
 80037b8:	4b79      	ldr	r3, [pc, #484]	; (80039a0 <_vfiprintf_r+0x248>)
 80037ba:	429d      	cmp	r5, r3
 80037bc:	bf08      	it	eq
 80037be:	68f5      	ldreq	r5, [r6, #12]
 80037c0:	e7da      	b.n	8003778 <_vfiprintf_r+0x20>
 80037c2:	89ab      	ldrh	r3, [r5, #12]
 80037c4:	0598      	lsls	r0, r3, #22
 80037c6:	d4ed      	bmi.n	80037a4 <_vfiprintf_r+0x4c>
 80037c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037ca:	f7ff fe5a 	bl	8003482 <__retarget_lock_release_recursive>
 80037ce:	e7e9      	b.n	80037a4 <_vfiprintf_r+0x4c>
 80037d0:	2300      	movs	r3, #0
 80037d2:	9309      	str	r3, [sp, #36]	; 0x24
 80037d4:	2320      	movs	r3, #32
 80037d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037da:	2330      	movs	r3, #48	; 0x30
 80037dc:	f04f 0901 	mov.w	r9, #1
 80037e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80037e4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80039a4 <_vfiprintf_r+0x24c>
 80037e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037ec:	4623      	mov	r3, r4
 80037ee:	469a      	mov	sl, r3
 80037f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037f4:	b10a      	cbz	r2, 80037fa <_vfiprintf_r+0xa2>
 80037f6:	2a25      	cmp	r2, #37	; 0x25
 80037f8:	d1f9      	bne.n	80037ee <_vfiprintf_r+0x96>
 80037fa:	ebba 0b04 	subs.w	fp, sl, r4
 80037fe:	d00b      	beq.n	8003818 <_vfiprintf_r+0xc0>
 8003800:	465b      	mov	r3, fp
 8003802:	4622      	mov	r2, r4
 8003804:	4629      	mov	r1, r5
 8003806:	4630      	mov	r0, r6
 8003808:	f7ff ff93 	bl	8003732 <__sfputs_r>
 800380c:	3001      	adds	r0, #1
 800380e:	f000 80aa 	beq.w	8003966 <_vfiprintf_r+0x20e>
 8003812:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003814:	445a      	add	r2, fp
 8003816:	9209      	str	r2, [sp, #36]	; 0x24
 8003818:	f89a 3000 	ldrb.w	r3, [sl]
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 80a2 	beq.w	8003966 <_vfiprintf_r+0x20e>
 8003822:	2300      	movs	r3, #0
 8003824:	f04f 32ff 	mov.w	r2, #4294967295
 8003828:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800382c:	f10a 0a01 	add.w	sl, sl, #1
 8003830:	9304      	str	r3, [sp, #16]
 8003832:	9307      	str	r3, [sp, #28]
 8003834:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003838:	931a      	str	r3, [sp, #104]	; 0x68
 800383a:	4654      	mov	r4, sl
 800383c:	2205      	movs	r2, #5
 800383e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003842:	4858      	ldr	r0, [pc, #352]	; (80039a4 <_vfiprintf_r+0x24c>)
 8003844:	f000 faf8 	bl	8003e38 <memchr>
 8003848:	9a04      	ldr	r2, [sp, #16]
 800384a:	b9d8      	cbnz	r0, 8003884 <_vfiprintf_r+0x12c>
 800384c:	06d1      	lsls	r1, r2, #27
 800384e:	bf44      	itt	mi
 8003850:	2320      	movmi	r3, #32
 8003852:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003856:	0713      	lsls	r3, r2, #28
 8003858:	bf44      	itt	mi
 800385a:	232b      	movmi	r3, #43	; 0x2b
 800385c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003860:	f89a 3000 	ldrb.w	r3, [sl]
 8003864:	2b2a      	cmp	r3, #42	; 0x2a
 8003866:	d015      	beq.n	8003894 <_vfiprintf_r+0x13c>
 8003868:	4654      	mov	r4, sl
 800386a:	2000      	movs	r0, #0
 800386c:	f04f 0c0a 	mov.w	ip, #10
 8003870:	9a07      	ldr	r2, [sp, #28]
 8003872:	4621      	mov	r1, r4
 8003874:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003878:	3b30      	subs	r3, #48	; 0x30
 800387a:	2b09      	cmp	r3, #9
 800387c:	d94e      	bls.n	800391c <_vfiprintf_r+0x1c4>
 800387e:	b1b0      	cbz	r0, 80038ae <_vfiprintf_r+0x156>
 8003880:	9207      	str	r2, [sp, #28]
 8003882:	e014      	b.n	80038ae <_vfiprintf_r+0x156>
 8003884:	eba0 0308 	sub.w	r3, r0, r8
 8003888:	fa09 f303 	lsl.w	r3, r9, r3
 800388c:	4313      	orrs	r3, r2
 800388e:	46a2      	mov	sl, r4
 8003890:	9304      	str	r3, [sp, #16]
 8003892:	e7d2      	b.n	800383a <_vfiprintf_r+0xe2>
 8003894:	9b03      	ldr	r3, [sp, #12]
 8003896:	1d19      	adds	r1, r3, #4
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	9103      	str	r1, [sp, #12]
 800389c:	2b00      	cmp	r3, #0
 800389e:	bfbb      	ittet	lt
 80038a0:	425b      	neglt	r3, r3
 80038a2:	f042 0202 	orrlt.w	r2, r2, #2
 80038a6:	9307      	strge	r3, [sp, #28]
 80038a8:	9307      	strlt	r3, [sp, #28]
 80038aa:	bfb8      	it	lt
 80038ac:	9204      	strlt	r2, [sp, #16]
 80038ae:	7823      	ldrb	r3, [r4, #0]
 80038b0:	2b2e      	cmp	r3, #46	; 0x2e
 80038b2:	d10c      	bne.n	80038ce <_vfiprintf_r+0x176>
 80038b4:	7863      	ldrb	r3, [r4, #1]
 80038b6:	2b2a      	cmp	r3, #42	; 0x2a
 80038b8:	d135      	bne.n	8003926 <_vfiprintf_r+0x1ce>
 80038ba:	9b03      	ldr	r3, [sp, #12]
 80038bc:	3402      	adds	r4, #2
 80038be:	1d1a      	adds	r2, r3, #4
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	9203      	str	r2, [sp, #12]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bfb8      	it	lt
 80038c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80038cc:	9305      	str	r3, [sp, #20]
 80038ce:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80039a8 <_vfiprintf_r+0x250>
 80038d2:	2203      	movs	r2, #3
 80038d4:	4650      	mov	r0, sl
 80038d6:	7821      	ldrb	r1, [r4, #0]
 80038d8:	f000 faae 	bl	8003e38 <memchr>
 80038dc:	b140      	cbz	r0, 80038f0 <_vfiprintf_r+0x198>
 80038de:	2340      	movs	r3, #64	; 0x40
 80038e0:	eba0 000a 	sub.w	r0, r0, sl
 80038e4:	fa03 f000 	lsl.w	r0, r3, r0
 80038e8:	9b04      	ldr	r3, [sp, #16]
 80038ea:	3401      	adds	r4, #1
 80038ec:	4303      	orrs	r3, r0
 80038ee:	9304      	str	r3, [sp, #16]
 80038f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038f4:	2206      	movs	r2, #6
 80038f6:	482d      	ldr	r0, [pc, #180]	; (80039ac <_vfiprintf_r+0x254>)
 80038f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038fc:	f000 fa9c 	bl	8003e38 <memchr>
 8003900:	2800      	cmp	r0, #0
 8003902:	d03f      	beq.n	8003984 <_vfiprintf_r+0x22c>
 8003904:	4b2a      	ldr	r3, [pc, #168]	; (80039b0 <_vfiprintf_r+0x258>)
 8003906:	bb1b      	cbnz	r3, 8003950 <_vfiprintf_r+0x1f8>
 8003908:	9b03      	ldr	r3, [sp, #12]
 800390a:	3307      	adds	r3, #7
 800390c:	f023 0307 	bic.w	r3, r3, #7
 8003910:	3308      	adds	r3, #8
 8003912:	9303      	str	r3, [sp, #12]
 8003914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003916:	443b      	add	r3, r7
 8003918:	9309      	str	r3, [sp, #36]	; 0x24
 800391a:	e767      	b.n	80037ec <_vfiprintf_r+0x94>
 800391c:	460c      	mov	r4, r1
 800391e:	2001      	movs	r0, #1
 8003920:	fb0c 3202 	mla	r2, ip, r2, r3
 8003924:	e7a5      	b.n	8003872 <_vfiprintf_r+0x11a>
 8003926:	2300      	movs	r3, #0
 8003928:	f04f 0c0a 	mov.w	ip, #10
 800392c:	4619      	mov	r1, r3
 800392e:	3401      	adds	r4, #1
 8003930:	9305      	str	r3, [sp, #20]
 8003932:	4620      	mov	r0, r4
 8003934:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003938:	3a30      	subs	r2, #48	; 0x30
 800393a:	2a09      	cmp	r2, #9
 800393c:	d903      	bls.n	8003946 <_vfiprintf_r+0x1ee>
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0c5      	beq.n	80038ce <_vfiprintf_r+0x176>
 8003942:	9105      	str	r1, [sp, #20]
 8003944:	e7c3      	b.n	80038ce <_vfiprintf_r+0x176>
 8003946:	4604      	mov	r4, r0
 8003948:	2301      	movs	r3, #1
 800394a:	fb0c 2101 	mla	r1, ip, r1, r2
 800394e:	e7f0      	b.n	8003932 <_vfiprintf_r+0x1da>
 8003950:	ab03      	add	r3, sp, #12
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	462a      	mov	r2, r5
 8003956:	4630      	mov	r0, r6
 8003958:	4b16      	ldr	r3, [pc, #88]	; (80039b4 <_vfiprintf_r+0x25c>)
 800395a:	a904      	add	r1, sp, #16
 800395c:	f3af 8000 	nop.w
 8003960:	4607      	mov	r7, r0
 8003962:	1c78      	adds	r0, r7, #1
 8003964:	d1d6      	bne.n	8003914 <_vfiprintf_r+0x1bc>
 8003966:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003968:	07d9      	lsls	r1, r3, #31
 800396a:	d405      	bmi.n	8003978 <_vfiprintf_r+0x220>
 800396c:	89ab      	ldrh	r3, [r5, #12]
 800396e:	059a      	lsls	r2, r3, #22
 8003970:	d402      	bmi.n	8003978 <_vfiprintf_r+0x220>
 8003972:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003974:	f7ff fd85 	bl	8003482 <__retarget_lock_release_recursive>
 8003978:	89ab      	ldrh	r3, [r5, #12]
 800397a:	065b      	lsls	r3, r3, #25
 800397c:	f53f af12 	bmi.w	80037a4 <_vfiprintf_r+0x4c>
 8003980:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003982:	e711      	b.n	80037a8 <_vfiprintf_r+0x50>
 8003984:	ab03      	add	r3, sp, #12
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	462a      	mov	r2, r5
 800398a:	4630      	mov	r0, r6
 800398c:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <_vfiprintf_r+0x25c>)
 800398e:	a904      	add	r1, sp, #16
 8003990:	f000 f882 	bl	8003a98 <_printf_i>
 8003994:	e7e4      	b.n	8003960 <_vfiprintf_r+0x208>
 8003996:	bf00      	nop
 8003998:	08003f5c 	.word	0x08003f5c
 800399c:	08003f7c 	.word	0x08003f7c
 80039a0:	08003f3c 	.word	0x08003f3c
 80039a4:	08003f9c 	.word	0x08003f9c
 80039a8:	08003fa2 	.word	0x08003fa2
 80039ac:	08003fa6 	.word	0x08003fa6
 80039b0:	00000000 	.word	0x00000000
 80039b4:	08003733 	.word	0x08003733

080039b8 <_printf_common>:
 80039b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039bc:	4616      	mov	r6, r2
 80039be:	4699      	mov	r9, r3
 80039c0:	688a      	ldr	r2, [r1, #8]
 80039c2:	690b      	ldr	r3, [r1, #16]
 80039c4:	4607      	mov	r7, r0
 80039c6:	4293      	cmp	r3, r2
 80039c8:	bfb8      	it	lt
 80039ca:	4613      	movlt	r3, r2
 80039cc:	6033      	str	r3, [r6, #0]
 80039ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039d2:	460c      	mov	r4, r1
 80039d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039d8:	b10a      	cbz	r2, 80039de <_printf_common+0x26>
 80039da:	3301      	adds	r3, #1
 80039dc:	6033      	str	r3, [r6, #0]
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	0699      	lsls	r1, r3, #26
 80039e2:	bf42      	ittt	mi
 80039e4:	6833      	ldrmi	r3, [r6, #0]
 80039e6:	3302      	addmi	r3, #2
 80039e8:	6033      	strmi	r3, [r6, #0]
 80039ea:	6825      	ldr	r5, [r4, #0]
 80039ec:	f015 0506 	ands.w	r5, r5, #6
 80039f0:	d106      	bne.n	8003a00 <_printf_common+0x48>
 80039f2:	f104 0a19 	add.w	sl, r4, #25
 80039f6:	68e3      	ldr	r3, [r4, #12]
 80039f8:	6832      	ldr	r2, [r6, #0]
 80039fa:	1a9b      	subs	r3, r3, r2
 80039fc:	42ab      	cmp	r3, r5
 80039fe:	dc28      	bgt.n	8003a52 <_printf_common+0x9a>
 8003a00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a04:	1e13      	subs	r3, r2, #0
 8003a06:	6822      	ldr	r2, [r4, #0]
 8003a08:	bf18      	it	ne
 8003a0a:	2301      	movne	r3, #1
 8003a0c:	0692      	lsls	r2, r2, #26
 8003a0e:	d42d      	bmi.n	8003a6c <_printf_common+0xb4>
 8003a10:	4649      	mov	r1, r9
 8003a12:	4638      	mov	r0, r7
 8003a14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a18:	47c0      	blx	r8
 8003a1a:	3001      	adds	r0, #1
 8003a1c:	d020      	beq.n	8003a60 <_printf_common+0xa8>
 8003a1e:	6823      	ldr	r3, [r4, #0]
 8003a20:	68e5      	ldr	r5, [r4, #12]
 8003a22:	f003 0306 	and.w	r3, r3, #6
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	bf18      	it	ne
 8003a2a:	2500      	movne	r5, #0
 8003a2c:	6832      	ldr	r2, [r6, #0]
 8003a2e:	f04f 0600 	mov.w	r6, #0
 8003a32:	68a3      	ldr	r3, [r4, #8]
 8003a34:	bf08      	it	eq
 8003a36:	1aad      	subeq	r5, r5, r2
 8003a38:	6922      	ldr	r2, [r4, #16]
 8003a3a:	bf08      	it	eq
 8003a3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a40:	4293      	cmp	r3, r2
 8003a42:	bfc4      	itt	gt
 8003a44:	1a9b      	subgt	r3, r3, r2
 8003a46:	18ed      	addgt	r5, r5, r3
 8003a48:	341a      	adds	r4, #26
 8003a4a:	42b5      	cmp	r5, r6
 8003a4c:	d11a      	bne.n	8003a84 <_printf_common+0xcc>
 8003a4e:	2000      	movs	r0, #0
 8003a50:	e008      	b.n	8003a64 <_printf_common+0xac>
 8003a52:	2301      	movs	r3, #1
 8003a54:	4652      	mov	r2, sl
 8003a56:	4649      	mov	r1, r9
 8003a58:	4638      	mov	r0, r7
 8003a5a:	47c0      	blx	r8
 8003a5c:	3001      	adds	r0, #1
 8003a5e:	d103      	bne.n	8003a68 <_printf_common+0xb0>
 8003a60:	f04f 30ff 	mov.w	r0, #4294967295
 8003a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a68:	3501      	adds	r5, #1
 8003a6a:	e7c4      	b.n	80039f6 <_printf_common+0x3e>
 8003a6c:	2030      	movs	r0, #48	; 0x30
 8003a6e:	18e1      	adds	r1, r4, r3
 8003a70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a7a:	4422      	add	r2, r4
 8003a7c:	3302      	adds	r3, #2
 8003a7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a82:	e7c5      	b.n	8003a10 <_printf_common+0x58>
 8003a84:	2301      	movs	r3, #1
 8003a86:	4622      	mov	r2, r4
 8003a88:	4649      	mov	r1, r9
 8003a8a:	4638      	mov	r0, r7
 8003a8c:	47c0      	blx	r8
 8003a8e:	3001      	adds	r0, #1
 8003a90:	d0e6      	beq.n	8003a60 <_printf_common+0xa8>
 8003a92:	3601      	adds	r6, #1
 8003a94:	e7d9      	b.n	8003a4a <_printf_common+0x92>
	...

08003a98 <_printf_i>:
 8003a98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a9c:	7e0f      	ldrb	r7, [r1, #24]
 8003a9e:	4691      	mov	r9, r2
 8003aa0:	2f78      	cmp	r7, #120	; 0x78
 8003aa2:	4680      	mov	r8, r0
 8003aa4:	460c      	mov	r4, r1
 8003aa6:	469a      	mov	sl, r3
 8003aa8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003aaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003aae:	d807      	bhi.n	8003ac0 <_printf_i+0x28>
 8003ab0:	2f62      	cmp	r7, #98	; 0x62
 8003ab2:	d80a      	bhi.n	8003aca <_printf_i+0x32>
 8003ab4:	2f00      	cmp	r7, #0
 8003ab6:	f000 80d9 	beq.w	8003c6c <_printf_i+0x1d4>
 8003aba:	2f58      	cmp	r7, #88	; 0x58
 8003abc:	f000 80a4 	beq.w	8003c08 <_printf_i+0x170>
 8003ac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ac4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ac8:	e03a      	b.n	8003b40 <_printf_i+0xa8>
 8003aca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ace:	2b15      	cmp	r3, #21
 8003ad0:	d8f6      	bhi.n	8003ac0 <_printf_i+0x28>
 8003ad2:	a101      	add	r1, pc, #4	; (adr r1, 8003ad8 <_printf_i+0x40>)
 8003ad4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ad8:	08003b31 	.word	0x08003b31
 8003adc:	08003b45 	.word	0x08003b45
 8003ae0:	08003ac1 	.word	0x08003ac1
 8003ae4:	08003ac1 	.word	0x08003ac1
 8003ae8:	08003ac1 	.word	0x08003ac1
 8003aec:	08003ac1 	.word	0x08003ac1
 8003af0:	08003b45 	.word	0x08003b45
 8003af4:	08003ac1 	.word	0x08003ac1
 8003af8:	08003ac1 	.word	0x08003ac1
 8003afc:	08003ac1 	.word	0x08003ac1
 8003b00:	08003ac1 	.word	0x08003ac1
 8003b04:	08003c53 	.word	0x08003c53
 8003b08:	08003b75 	.word	0x08003b75
 8003b0c:	08003c35 	.word	0x08003c35
 8003b10:	08003ac1 	.word	0x08003ac1
 8003b14:	08003ac1 	.word	0x08003ac1
 8003b18:	08003c75 	.word	0x08003c75
 8003b1c:	08003ac1 	.word	0x08003ac1
 8003b20:	08003b75 	.word	0x08003b75
 8003b24:	08003ac1 	.word	0x08003ac1
 8003b28:	08003ac1 	.word	0x08003ac1
 8003b2c:	08003c3d 	.word	0x08003c3d
 8003b30:	682b      	ldr	r3, [r5, #0]
 8003b32:	1d1a      	adds	r2, r3, #4
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	602a      	str	r2, [r5, #0]
 8003b38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b40:	2301      	movs	r3, #1
 8003b42:	e0a4      	b.n	8003c8e <_printf_i+0x1f6>
 8003b44:	6820      	ldr	r0, [r4, #0]
 8003b46:	6829      	ldr	r1, [r5, #0]
 8003b48:	0606      	lsls	r6, r0, #24
 8003b4a:	f101 0304 	add.w	r3, r1, #4
 8003b4e:	d50a      	bpl.n	8003b66 <_printf_i+0xce>
 8003b50:	680e      	ldr	r6, [r1, #0]
 8003b52:	602b      	str	r3, [r5, #0]
 8003b54:	2e00      	cmp	r6, #0
 8003b56:	da03      	bge.n	8003b60 <_printf_i+0xc8>
 8003b58:	232d      	movs	r3, #45	; 0x2d
 8003b5a:	4276      	negs	r6, r6
 8003b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b60:	230a      	movs	r3, #10
 8003b62:	485e      	ldr	r0, [pc, #376]	; (8003cdc <_printf_i+0x244>)
 8003b64:	e019      	b.n	8003b9a <_printf_i+0x102>
 8003b66:	680e      	ldr	r6, [r1, #0]
 8003b68:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b6c:	602b      	str	r3, [r5, #0]
 8003b6e:	bf18      	it	ne
 8003b70:	b236      	sxthne	r6, r6
 8003b72:	e7ef      	b.n	8003b54 <_printf_i+0xbc>
 8003b74:	682b      	ldr	r3, [r5, #0]
 8003b76:	6820      	ldr	r0, [r4, #0]
 8003b78:	1d19      	adds	r1, r3, #4
 8003b7a:	6029      	str	r1, [r5, #0]
 8003b7c:	0601      	lsls	r1, r0, #24
 8003b7e:	d501      	bpl.n	8003b84 <_printf_i+0xec>
 8003b80:	681e      	ldr	r6, [r3, #0]
 8003b82:	e002      	b.n	8003b8a <_printf_i+0xf2>
 8003b84:	0646      	lsls	r6, r0, #25
 8003b86:	d5fb      	bpl.n	8003b80 <_printf_i+0xe8>
 8003b88:	881e      	ldrh	r6, [r3, #0]
 8003b8a:	2f6f      	cmp	r7, #111	; 0x6f
 8003b8c:	bf0c      	ite	eq
 8003b8e:	2308      	moveq	r3, #8
 8003b90:	230a      	movne	r3, #10
 8003b92:	4852      	ldr	r0, [pc, #328]	; (8003cdc <_printf_i+0x244>)
 8003b94:	2100      	movs	r1, #0
 8003b96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b9a:	6865      	ldr	r5, [r4, #4]
 8003b9c:	2d00      	cmp	r5, #0
 8003b9e:	bfa8      	it	ge
 8003ba0:	6821      	ldrge	r1, [r4, #0]
 8003ba2:	60a5      	str	r5, [r4, #8]
 8003ba4:	bfa4      	itt	ge
 8003ba6:	f021 0104 	bicge.w	r1, r1, #4
 8003baa:	6021      	strge	r1, [r4, #0]
 8003bac:	b90e      	cbnz	r6, 8003bb2 <_printf_i+0x11a>
 8003bae:	2d00      	cmp	r5, #0
 8003bb0:	d04d      	beq.n	8003c4e <_printf_i+0x1b6>
 8003bb2:	4615      	mov	r5, r2
 8003bb4:	fbb6 f1f3 	udiv	r1, r6, r3
 8003bb8:	fb03 6711 	mls	r7, r3, r1, r6
 8003bbc:	5dc7      	ldrb	r7, [r0, r7]
 8003bbe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003bc2:	4637      	mov	r7, r6
 8003bc4:	42bb      	cmp	r3, r7
 8003bc6:	460e      	mov	r6, r1
 8003bc8:	d9f4      	bls.n	8003bb4 <_printf_i+0x11c>
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d10b      	bne.n	8003be6 <_printf_i+0x14e>
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	07de      	lsls	r6, r3, #31
 8003bd2:	d508      	bpl.n	8003be6 <_printf_i+0x14e>
 8003bd4:	6923      	ldr	r3, [r4, #16]
 8003bd6:	6861      	ldr	r1, [r4, #4]
 8003bd8:	4299      	cmp	r1, r3
 8003bda:	bfde      	ittt	le
 8003bdc:	2330      	movle	r3, #48	; 0x30
 8003bde:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003be2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003be6:	1b52      	subs	r2, r2, r5
 8003be8:	6122      	str	r2, [r4, #16]
 8003bea:	464b      	mov	r3, r9
 8003bec:	4621      	mov	r1, r4
 8003bee:	4640      	mov	r0, r8
 8003bf0:	f8cd a000 	str.w	sl, [sp]
 8003bf4:	aa03      	add	r2, sp, #12
 8003bf6:	f7ff fedf 	bl	80039b8 <_printf_common>
 8003bfa:	3001      	adds	r0, #1
 8003bfc:	d14c      	bne.n	8003c98 <_printf_i+0x200>
 8003bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8003c02:	b004      	add	sp, #16
 8003c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c08:	4834      	ldr	r0, [pc, #208]	; (8003cdc <_printf_i+0x244>)
 8003c0a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003c0e:	6829      	ldr	r1, [r5, #0]
 8003c10:	6823      	ldr	r3, [r4, #0]
 8003c12:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c16:	6029      	str	r1, [r5, #0]
 8003c18:	061d      	lsls	r5, r3, #24
 8003c1a:	d514      	bpl.n	8003c46 <_printf_i+0x1ae>
 8003c1c:	07df      	lsls	r7, r3, #31
 8003c1e:	bf44      	itt	mi
 8003c20:	f043 0320 	orrmi.w	r3, r3, #32
 8003c24:	6023      	strmi	r3, [r4, #0]
 8003c26:	b91e      	cbnz	r6, 8003c30 <_printf_i+0x198>
 8003c28:	6823      	ldr	r3, [r4, #0]
 8003c2a:	f023 0320 	bic.w	r3, r3, #32
 8003c2e:	6023      	str	r3, [r4, #0]
 8003c30:	2310      	movs	r3, #16
 8003c32:	e7af      	b.n	8003b94 <_printf_i+0xfc>
 8003c34:	6823      	ldr	r3, [r4, #0]
 8003c36:	f043 0320 	orr.w	r3, r3, #32
 8003c3a:	6023      	str	r3, [r4, #0]
 8003c3c:	2378      	movs	r3, #120	; 0x78
 8003c3e:	4828      	ldr	r0, [pc, #160]	; (8003ce0 <_printf_i+0x248>)
 8003c40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c44:	e7e3      	b.n	8003c0e <_printf_i+0x176>
 8003c46:	0659      	lsls	r1, r3, #25
 8003c48:	bf48      	it	mi
 8003c4a:	b2b6      	uxthmi	r6, r6
 8003c4c:	e7e6      	b.n	8003c1c <_printf_i+0x184>
 8003c4e:	4615      	mov	r5, r2
 8003c50:	e7bb      	b.n	8003bca <_printf_i+0x132>
 8003c52:	682b      	ldr	r3, [r5, #0]
 8003c54:	6826      	ldr	r6, [r4, #0]
 8003c56:	1d18      	adds	r0, r3, #4
 8003c58:	6961      	ldr	r1, [r4, #20]
 8003c5a:	6028      	str	r0, [r5, #0]
 8003c5c:	0635      	lsls	r5, r6, #24
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	d501      	bpl.n	8003c66 <_printf_i+0x1ce>
 8003c62:	6019      	str	r1, [r3, #0]
 8003c64:	e002      	b.n	8003c6c <_printf_i+0x1d4>
 8003c66:	0670      	lsls	r0, r6, #25
 8003c68:	d5fb      	bpl.n	8003c62 <_printf_i+0x1ca>
 8003c6a:	8019      	strh	r1, [r3, #0]
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	4615      	mov	r5, r2
 8003c70:	6123      	str	r3, [r4, #16]
 8003c72:	e7ba      	b.n	8003bea <_printf_i+0x152>
 8003c74:	682b      	ldr	r3, [r5, #0]
 8003c76:	2100      	movs	r1, #0
 8003c78:	1d1a      	adds	r2, r3, #4
 8003c7a:	602a      	str	r2, [r5, #0]
 8003c7c:	681d      	ldr	r5, [r3, #0]
 8003c7e:	6862      	ldr	r2, [r4, #4]
 8003c80:	4628      	mov	r0, r5
 8003c82:	f000 f8d9 	bl	8003e38 <memchr>
 8003c86:	b108      	cbz	r0, 8003c8c <_printf_i+0x1f4>
 8003c88:	1b40      	subs	r0, r0, r5
 8003c8a:	6060      	str	r0, [r4, #4]
 8003c8c:	6863      	ldr	r3, [r4, #4]
 8003c8e:	6123      	str	r3, [r4, #16]
 8003c90:	2300      	movs	r3, #0
 8003c92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c96:	e7a8      	b.n	8003bea <_printf_i+0x152>
 8003c98:	462a      	mov	r2, r5
 8003c9a:	4649      	mov	r1, r9
 8003c9c:	4640      	mov	r0, r8
 8003c9e:	6923      	ldr	r3, [r4, #16]
 8003ca0:	47d0      	blx	sl
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	d0ab      	beq.n	8003bfe <_printf_i+0x166>
 8003ca6:	6823      	ldr	r3, [r4, #0]
 8003ca8:	079b      	lsls	r3, r3, #30
 8003caa:	d413      	bmi.n	8003cd4 <_printf_i+0x23c>
 8003cac:	68e0      	ldr	r0, [r4, #12]
 8003cae:	9b03      	ldr	r3, [sp, #12]
 8003cb0:	4298      	cmp	r0, r3
 8003cb2:	bfb8      	it	lt
 8003cb4:	4618      	movlt	r0, r3
 8003cb6:	e7a4      	b.n	8003c02 <_printf_i+0x16a>
 8003cb8:	2301      	movs	r3, #1
 8003cba:	4632      	mov	r2, r6
 8003cbc:	4649      	mov	r1, r9
 8003cbe:	4640      	mov	r0, r8
 8003cc0:	47d0      	blx	sl
 8003cc2:	3001      	adds	r0, #1
 8003cc4:	d09b      	beq.n	8003bfe <_printf_i+0x166>
 8003cc6:	3501      	adds	r5, #1
 8003cc8:	68e3      	ldr	r3, [r4, #12]
 8003cca:	9903      	ldr	r1, [sp, #12]
 8003ccc:	1a5b      	subs	r3, r3, r1
 8003cce:	42ab      	cmp	r3, r5
 8003cd0:	dcf2      	bgt.n	8003cb8 <_printf_i+0x220>
 8003cd2:	e7eb      	b.n	8003cac <_printf_i+0x214>
 8003cd4:	2500      	movs	r5, #0
 8003cd6:	f104 0619 	add.w	r6, r4, #25
 8003cda:	e7f5      	b.n	8003cc8 <_printf_i+0x230>
 8003cdc:	08003fad 	.word	0x08003fad
 8003ce0:	08003fbe 	.word	0x08003fbe

08003ce4 <_sbrk_r>:
 8003ce4:	b538      	push	{r3, r4, r5, lr}
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	4d05      	ldr	r5, [pc, #20]	; (8003d00 <_sbrk_r+0x1c>)
 8003cea:	4604      	mov	r4, r0
 8003cec:	4608      	mov	r0, r1
 8003cee:	602b      	str	r3, [r5, #0]
 8003cf0:	f7fc fe9e 	bl	8000a30 <_sbrk>
 8003cf4:	1c43      	adds	r3, r0, #1
 8003cf6:	d102      	bne.n	8003cfe <_sbrk_r+0x1a>
 8003cf8:	682b      	ldr	r3, [r5, #0]
 8003cfa:	b103      	cbz	r3, 8003cfe <_sbrk_r+0x1a>
 8003cfc:	6023      	str	r3, [r4, #0]
 8003cfe:	bd38      	pop	{r3, r4, r5, pc}
 8003d00:	20000164 	.word	0x20000164

08003d04 <__sread>:
 8003d04:	b510      	push	{r4, lr}
 8003d06:	460c      	mov	r4, r1
 8003d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d0c:	f000 f8ae 	bl	8003e6c <_read_r>
 8003d10:	2800      	cmp	r0, #0
 8003d12:	bfab      	itete	ge
 8003d14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d16:	89a3      	ldrhlt	r3, [r4, #12]
 8003d18:	181b      	addge	r3, r3, r0
 8003d1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d1e:	bfac      	ite	ge
 8003d20:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d22:	81a3      	strhlt	r3, [r4, #12]
 8003d24:	bd10      	pop	{r4, pc}

08003d26 <__swrite>:
 8003d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d2a:	461f      	mov	r7, r3
 8003d2c:	898b      	ldrh	r3, [r1, #12]
 8003d2e:	4605      	mov	r5, r0
 8003d30:	05db      	lsls	r3, r3, #23
 8003d32:	460c      	mov	r4, r1
 8003d34:	4616      	mov	r6, r2
 8003d36:	d505      	bpl.n	8003d44 <__swrite+0x1e>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d40:	f000 f868 	bl	8003e14 <_lseek_r>
 8003d44:	89a3      	ldrh	r3, [r4, #12]
 8003d46:	4632      	mov	r2, r6
 8003d48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d4c:	81a3      	strh	r3, [r4, #12]
 8003d4e:	4628      	mov	r0, r5
 8003d50:	463b      	mov	r3, r7
 8003d52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d5a:	f000 b817 	b.w	8003d8c <_write_r>

08003d5e <__sseek>:
 8003d5e:	b510      	push	{r4, lr}
 8003d60:	460c      	mov	r4, r1
 8003d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d66:	f000 f855 	bl	8003e14 <_lseek_r>
 8003d6a:	1c43      	adds	r3, r0, #1
 8003d6c:	89a3      	ldrh	r3, [r4, #12]
 8003d6e:	bf15      	itete	ne
 8003d70:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d7a:	81a3      	strheq	r3, [r4, #12]
 8003d7c:	bf18      	it	ne
 8003d7e:	81a3      	strhne	r3, [r4, #12]
 8003d80:	bd10      	pop	{r4, pc}

08003d82 <__sclose>:
 8003d82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d86:	f000 b813 	b.w	8003db0 <_close_r>
	...

08003d8c <_write_r>:
 8003d8c:	b538      	push	{r3, r4, r5, lr}
 8003d8e:	4604      	mov	r4, r0
 8003d90:	4608      	mov	r0, r1
 8003d92:	4611      	mov	r1, r2
 8003d94:	2200      	movs	r2, #0
 8003d96:	4d05      	ldr	r5, [pc, #20]	; (8003dac <_write_r+0x20>)
 8003d98:	602a      	str	r2, [r5, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f7fc fdfc 	bl	8000998 <_write>
 8003da0:	1c43      	adds	r3, r0, #1
 8003da2:	d102      	bne.n	8003daa <_write_r+0x1e>
 8003da4:	682b      	ldr	r3, [r5, #0]
 8003da6:	b103      	cbz	r3, 8003daa <_write_r+0x1e>
 8003da8:	6023      	str	r3, [r4, #0]
 8003daa:	bd38      	pop	{r3, r4, r5, pc}
 8003dac:	20000164 	.word	0x20000164

08003db0 <_close_r>:
 8003db0:	b538      	push	{r3, r4, r5, lr}
 8003db2:	2300      	movs	r3, #0
 8003db4:	4d05      	ldr	r5, [pc, #20]	; (8003dcc <_close_r+0x1c>)
 8003db6:	4604      	mov	r4, r0
 8003db8:	4608      	mov	r0, r1
 8003dba:	602b      	str	r3, [r5, #0]
 8003dbc:	f7fc fe08 	bl	80009d0 <_close>
 8003dc0:	1c43      	adds	r3, r0, #1
 8003dc2:	d102      	bne.n	8003dca <_close_r+0x1a>
 8003dc4:	682b      	ldr	r3, [r5, #0]
 8003dc6:	b103      	cbz	r3, 8003dca <_close_r+0x1a>
 8003dc8:	6023      	str	r3, [r4, #0]
 8003dca:	bd38      	pop	{r3, r4, r5, pc}
 8003dcc:	20000164 	.word	0x20000164

08003dd0 <_fstat_r>:
 8003dd0:	b538      	push	{r3, r4, r5, lr}
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	4d06      	ldr	r5, [pc, #24]	; (8003df0 <_fstat_r+0x20>)
 8003dd6:	4604      	mov	r4, r0
 8003dd8:	4608      	mov	r0, r1
 8003dda:	4611      	mov	r1, r2
 8003ddc:	602b      	str	r3, [r5, #0]
 8003dde:	f7fc fe02 	bl	80009e6 <_fstat>
 8003de2:	1c43      	adds	r3, r0, #1
 8003de4:	d102      	bne.n	8003dec <_fstat_r+0x1c>
 8003de6:	682b      	ldr	r3, [r5, #0]
 8003de8:	b103      	cbz	r3, 8003dec <_fstat_r+0x1c>
 8003dea:	6023      	str	r3, [r4, #0]
 8003dec:	bd38      	pop	{r3, r4, r5, pc}
 8003dee:	bf00      	nop
 8003df0:	20000164 	.word	0x20000164

08003df4 <_isatty_r>:
 8003df4:	b538      	push	{r3, r4, r5, lr}
 8003df6:	2300      	movs	r3, #0
 8003df8:	4d05      	ldr	r5, [pc, #20]	; (8003e10 <_isatty_r+0x1c>)
 8003dfa:	4604      	mov	r4, r0
 8003dfc:	4608      	mov	r0, r1
 8003dfe:	602b      	str	r3, [r5, #0]
 8003e00:	f7fc fe00 	bl	8000a04 <_isatty>
 8003e04:	1c43      	adds	r3, r0, #1
 8003e06:	d102      	bne.n	8003e0e <_isatty_r+0x1a>
 8003e08:	682b      	ldr	r3, [r5, #0]
 8003e0a:	b103      	cbz	r3, 8003e0e <_isatty_r+0x1a>
 8003e0c:	6023      	str	r3, [r4, #0]
 8003e0e:	bd38      	pop	{r3, r4, r5, pc}
 8003e10:	20000164 	.word	0x20000164

08003e14 <_lseek_r>:
 8003e14:	b538      	push	{r3, r4, r5, lr}
 8003e16:	4604      	mov	r4, r0
 8003e18:	4608      	mov	r0, r1
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	4d05      	ldr	r5, [pc, #20]	; (8003e34 <_lseek_r+0x20>)
 8003e20:	602a      	str	r2, [r5, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	f7fc fdf8 	bl	8000a18 <_lseek>
 8003e28:	1c43      	adds	r3, r0, #1
 8003e2a:	d102      	bne.n	8003e32 <_lseek_r+0x1e>
 8003e2c:	682b      	ldr	r3, [r5, #0]
 8003e2e:	b103      	cbz	r3, 8003e32 <_lseek_r+0x1e>
 8003e30:	6023      	str	r3, [r4, #0]
 8003e32:	bd38      	pop	{r3, r4, r5, pc}
 8003e34:	20000164 	.word	0x20000164

08003e38 <memchr>:
 8003e38:	4603      	mov	r3, r0
 8003e3a:	b510      	push	{r4, lr}
 8003e3c:	b2c9      	uxtb	r1, r1
 8003e3e:	4402      	add	r2, r0
 8003e40:	4293      	cmp	r3, r2
 8003e42:	4618      	mov	r0, r3
 8003e44:	d101      	bne.n	8003e4a <memchr+0x12>
 8003e46:	2000      	movs	r0, #0
 8003e48:	e003      	b.n	8003e52 <memchr+0x1a>
 8003e4a:	7804      	ldrb	r4, [r0, #0]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	428c      	cmp	r4, r1
 8003e50:	d1f6      	bne.n	8003e40 <memchr+0x8>
 8003e52:	bd10      	pop	{r4, pc}

08003e54 <__malloc_lock>:
 8003e54:	4801      	ldr	r0, [pc, #4]	; (8003e5c <__malloc_lock+0x8>)
 8003e56:	f7ff bb13 	b.w	8003480 <__retarget_lock_acquire_recursive>
 8003e5a:	bf00      	nop
 8003e5c:	20000158 	.word	0x20000158

08003e60 <__malloc_unlock>:
 8003e60:	4801      	ldr	r0, [pc, #4]	; (8003e68 <__malloc_unlock+0x8>)
 8003e62:	f7ff bb0e 	b.w	8003482 <__retarget_lock_release_recursive>
 8003e66:	bf00      	nop
 8003e68:	20000158 	.word	0x20000158

08003e6c <_read_r>:
 8003e6c:	b538      	push	{r3, r4, r5, lr}
 8003e6e:	4604      	mov	r4, r0
 8003e70:	4608      	mov	r0, r1
 8003e72:	4611      	mov	r1, r2
 8003e74:	2200      	movs	r2, #0
 8003e76:	4d05      	ldr	r5, [pc, #20]	; (8003e8c <_read_r+0x20>)
 8003e78:	602a      	str	r2, [r5, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f7fc fd6f 	bl	800095e <_read>
 8003e80:	1c43      	adds	r3, r0, #1
 8003e82:	d102      	bne.n	8003e8a <_read_r+0x1e>
 8003e84:	682b      	ldr	r3, [r5, #0]
 8003e86:	b103      	cbz	r3, 8003e8a <_read_r+0x1e>
 8003e88:	6023      	str	r3, [r4, #0]
 8003e8a:	bd38      	pop	{r3, r4, r5, pc}
 8003e8c:	20000164 	.word	0x20000164

08003e90 <_init>:
 8003e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e92:	bf00      	nop
 8003e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e96:	bc08      	pop	{r3}
 8003e98:	469e      	mov	lr, r3
 8003e9a:	4770      	bx	lr

08003e9c <_fini>:
 8003e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e9e:	bf00      	nop
 8003ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ea2:	bc08      	pop	{r3}
 8003ea4:	469e      	mov	lr, r3
 8003ea6:	4770      	bx	lr
